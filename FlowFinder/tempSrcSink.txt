<com.frost.SensorEvent: float[] getSensorData()> -> _SOURCE_
<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SOURCE_
<android.location.IGpsStatusListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.telephony.PhoneNumberUtils: java.lang.String getStrippedReversed(java.lang.String)> -> _SOURCE_
<com.android.internal.telephony.sip.SipPhone: java.lang.String getVoiceMailNumber()> -> _SOURCE_
<com.google.android.picasasync.PicasaFacade: android.net.Uri getPhotosUri()> -> _SOURCE_
<com.android.internal.telephony.UiccSmsController: boolean updateMessageOnIccEfForSubscriber(int,java.lang.String,int,int,[byte)> -> _SOURCE_
<com.android.internal.telephony.UiccSmsController: boolean disableCellBroadcast(int)> -> _SOURCE_
<com.android.server.accounts.AccountManagerService: void getAccountsByFeatures(android.accounts.IAccountManagerResponse,java.lang.String,[java.lang.String)> -> _SOURCE_
<android.location.LocationManager: boolean registerAntennaInfoListener(java.util.concurrent.Executor,GnssAntennaInfo.Listener)> -> _SOURCE_
<android.location.Geocoder: java.util.List getFromLocation(double,double,int)> -> _SOURCE_
<com.android.internal.telephony.UiccCardApplication: java.lang.String getAid()> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: android.database.Cursor queryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory,boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<android.renderscript.Allocation: android.graphics.SurfaceTexture getSurfaceTexture()> -> _SOURCE_
<com.android.internal.policy.impl.keyguard.KeyguardSecurityModel: com.android.internal.policy.impl.keyguard.KeyguardSecurityModel$SecurityMode getBackupSecurityMode(com.android.internal.policy.impl.keyguard.KeyguardSecurityModel$SecurityMode)> -> _SOURCE_
<android.database.sqlite.SQLiteGlobal: java.lang.String getDefaultJournalMode()> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<android.telephony.gsm.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> -> _SOURCE_
<com.google.android.mms.pdu.EncodedStringValue: int getCharacterSet()> -> _SOURCE_
<com.google.android.mms.ContentType: java.util.ArrayList getVideoTypes()> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<com.android.server.telecom.TelecomServiceImpl: int getCurrentTtyMode()> -> _SOURCE_
<com.android.exchange.adapter.ContactsSyncAdapter: java.lang.String getSyncKey()> -> _SOURCE_
<android.net.wifi.p2p.WifiP2pManager: void requestDeviceInfo(Channel,DeviceInfoListener)> -> _SOURCE_
<com.android.contacts.detail.PhotoSelectionHandler: long getWritableEntityId()> -> _SOURCE_
<com.google.android.mms.pdu.PduPart: int getCharset()> -> _SOURCE_
<com.google.android.mms.pdu.ReadRecInd: long getDate()> -> _SOURCE_
<com.google.android.mms.pdu.GenericPdu: int getMmsVersion()> -> _SOURCE_
<android.location.LocationManager: android.location.LocationProvider getProvider(java.lang.String)> -> _SOURCE_
<android.location.Country: java.lang.String getCountryIso()> -> _SOURCE_
<com.android.internal.telephony.PhoneBase: java.lang.String getCdmaPrlVersion()> -> _SOURCE_
<com.android.server.LocationManagerService: boolean addGnssMeasurementsListener(android.location.IGnssMeasurementsListener,java.lang.String)> -> _SOURCE_
<android.location.LocationManager: boolean registerGnssNavigationMessageCallback(GnssNavigationMessageEvent.Callback,android.os.Handler)> -> _SOURCE_
<com.android.server.MmsServiceBroker$BinderService: void sendStoredMessage(long,java.lang.String,android.net.Uri,android.os.Bundle,android.app.PendingIntent)> -> _SOURCE_
<com.google.android.mms.pdu.SendReq: int getDeliveryReport()> -> _SOURCE_
<com.android.internal.telephony.PhoneBase: java.lang.String getMsisdn()> -> _SOURCE_
<android.database.MergeCursor: long getLong(int)> -> _SOURCE_
<android.database.CursorWindow: short getShort(int,int)> -> _SOURCE_
<android.database.CursorWrapper: int getColumnIndex(java.lang.String)> -> _SOURCE_
<android.content.pm.VerificationParams: android.net.Uri getVerificationURI()> -> _SOURCE_
<com.google.android.picasasync.PicasaFacade: android.net.Uri getUsersUri()> -> _SOURCE_
<com.android.internal.telephony.UiccPhoneBookController: boolean updateAdnRecordsInEfByIndexForSubscriber(int,int,java.lang.String,java.lang.String,int,java.lang.String)> -> _SOURCE_
<android.location.GpsSatellite: float getElevation()> -> _SOURCE_
<android.location.LocationManager: boolean registerGnssStatusCallback(GnssStatus.Callback)> -> _SOURCE_
<android.location.LocationManager: boolean registerGnssNavigationMessageCallback(GnssNavigationMessage.Callback,android.os.Handler)> -> _SOURCE_
<com.android.server.LocationManagerService: boolean isProviderEnabled(java.lang.String)> -> _SOURCE_
<com.google.android.mms.ContentType: java.util.ArrayList getSupportedTypes()> -> _SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getDeviceId()> -> _SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getDeviceSvn()> -> _SOURCE_
<android.location.LocationManager: java.util.List getAllProviders()> -> _SOURCE_
<android.os.UserManager: android.graphics.Bitmap getUserIcon(int)> -> _SOURCE_
<android.telephony.TelephonyManager: java.util.List getNeighboringCellInfo()> -> _SOURCE_
<gov.nist.javax.sip.header.WWWAuthenticate: javax.sip.address.URI getURI()> -> _SOURCE_
<android.app.WallpaperManager: android.graphics.drawable.Drawable getFastDrawable()> -> _SOURCE_
<com.android.server.accounts.AccountManagerService: android.accounts.Account[] getAccounts(java.lang.String)> -> _SOURCE_
<android.location.ILocationManager$Stub$Proxy: java.util.List getProviders(android.location.Criteria,boolean)> -> _SOURCE_
<com.google.android.picasasync.PicasaFacade: android.net.Uri getAlbumUri(long)> -> _SOURCE_
<com.google.android.mms.pdu.PduHeaders: byte[] getTextString(int)> -> _SOURCE_
<android.accounts.AccountManager: Account[] getAccounts()> -> _SOURCE_
<android.location.INetInitiatedListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<com.android.server.location.GpsXtraDownloader: byte[] downloadXtraData()> -> _SOURCE_
<android.provider.MediaStore$Audio$Media: android.net.Uri getContentUri(java.lang.String)> -> _SOURCE_
<com.google.android.mms.pdu.MultimediaMessagePdu: com.google.android.mms.pdu.EncodedStringValue[] getTo()> -> _SOURCE_
<com.android.providers.contacts.LegacyApiSupport: java.lang.String getType(android.net.Uri)> -> _SOURCE_
<android.telephony.TelephonyManager: int getNetworkType()> -> _SOURCE_
<com.android.server.location.LocationProviderProxy: int getStatus(android.os.Bundle)> -> _SOURCE_
<android.location.Criteria: int getBearingAccuracy()> -> _SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getLine1Number()> -> _SOURCE_
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getMsisdn()> -> _SOURCE_
<android.location.Criteria: int getHorizontalAccuracy()> -> _SOURCE_
<android.database.CursorWindow: double getDouble(int,int)> -> _SOURCE_
<com.google.android.mms.pdu.ReadOrigInd: long getDate()> -> _SOURCE_
<com.google.android.mms.pdu.DeliveryInd: long getDate()> -> _SOURCE_
<android.renderscript.Allocation: android.renderscript.Element getElement()> -> _SOURCE_
<android.telephony.TelephonyManager: java.util.List getAllCellInfo()> -> _SOURCE_
<android.database.CursorWrapper: java.lang.String getString(int)> -> _SOURCE_
<android.telephony.SmsManager: void sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)> -> _SOURCE_
<android.location.LocationManager: void requestSingleUpdate(android.location.Criteria,android.app.PendingIntent)> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.String[],android.os.CancellationSignal)> -> _SOURCE_
<com.android.providers.contacts.CallLogProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> -> _SOURCE_
<com.android.server.sip.SipSessionGroup: java.lang.String getLocalProfileUri()> -> _SOURCE_
<com.android.internal.location.GpsNetInitiatedHandler: byte[] stringToByteArray(java.lang.String,boolean)> -> _SOURCE_
<com.android.providers.contacts.LegacyApiSupport: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String)> -> _SOURCE_
<android.location.Location: float getAccuracy()> -> _SOURCE_
<com.android.internal.telephony.cdma.RuimPhoneBookInterfaceManager: java.util.List getAdnRecordsInEf(int)> -> _SOURCE_
<com.google.android.picasasync.Authorizer: java.lang.String getFreshAuthToken(java.lang.String,java.lang.String)> -> _SOURCE_
<android.provider.MediaStore$Audio$Media: android.net.Uri getContentUriForPath(java.lang.String)> -> _SOURCE_
<com.android.internal.telephony.UiccSmsController: boolean enableCellBroadcast(int)> -> _SOURCE_
<com.android.internal.telephony.PhoneBase: java.lang.String getActiveApnHost(java.lang.String)> -> _SOURCE_
<com.google.android.picasastore.FIFEUtil: java.lang.String getImageUriOptions(android.net.Uri)> -> _SOURCE_
<com.android.internal.telephony.IccPhoneBookInterfaceManager: boolean updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)> -> _SOURCE_
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getLine1AlphaTag()> -> _SOURCE_
<android.location.LocationRequest: int getNumUpdates()> -> _SOURCE_
<android.database.sqlite.SQLiteDebug: android.database.sqlite.SQLiteDebug$PagerStats getDatabaseInfo()> -> _SOURCE_
<android.database.AbstractCursor: int getColumnCount()> -> _SOURCE_
<com.android.mms.transaction.SendTransaction: byte[] getPdu(java.lang.String)> -> _SOURCE_
<com.android.internal.telephony.UiccSmsController: java.util.List getAllMessagesFromIccEfForSubscriber(long,java.lang.String)> -> _SOURCE_
<android.telecom.TelecomManager: PhoneAccountHandle getUserSelectedOutgoingPhoneAccount()> -> _SOURCE_
<com.android.internal.telephony.UiccPhoneBookController: java.util.List getAdnRecordsInEfForSubscriber(int,int)> -> _SOURCE_
<android.location.GpsSatellite: float getAzimuth()> -> _SOURCE_
<com.android.server.location.LocationFudger: android.location.Location getOrCreate(android.location.Location)> -> _SOURCE_
<org.apache.http.impl.client.DefaultRedirectHandler: java.net.URI getLocationURI(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)> -> _SOURCE_
<android.telephony.PhoneStateListener: void onDisplayInfoChanged(TelephonyDisplayInfo)> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: int getThreadDefaultConnectionFlags(boolean)> -> _SOURCE_
<android.location.LocationManager: void injectGnssMeasurementCorrections(GnssMeasurementCorrections)> -> _SOURCE_
<com.google.android.mms.pdu.PduHeaders: int getOctet(int)> -> _SOURCE_
<android.database.CursorWindow: int getStartPosition()> -> _SOURCE_
<android.location.Location: long getTime()> -> _SOURCE_
<org.xml.sax.helpers.ParserAdapter$AttributeListAdapter: java.lang.String getURI(int)> -> _SOURCE_
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: boolean disableCellBroadcast(int)> -> _SOURCE_
<android.telephony.PhoneNumberUtils: byte[] numberToCalledPartyBCD(java.lang.String)> -> _SOURCE_
<android.app.DownloadManager: android.net.Uri getDownloadUri(long)> -> _SOURCE_
<com.android.internal.telephony.IccPhoneBookInterfaceManager: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<com.android.phone.PhoneUtils: android.net.Uri getProviderGatewayUri(android.content.Intent)> -> _SOURCE_
<com.google.android.mms.pdu.RetrieveConf: int getDeliveryReport()> -> _SOURCE_
<android.database.sqlite.SQLiteQueryBuilder: java.lang.String getTables()> -> _SOURCE_
<android.location.LocationManager: boolean registerGnssStatusCallback(GnssStatus.Callback,android.os.Handler)> -> _SOURCE_
<android.location.LocationRequest: java.lang.String getProvider()> -> _SOURCE_
<com.android.internal.telephony.PhoneBase: java.lang.String getCdmaEriText()> -> _SOURCE_
<java.lang.SecurityManager: java.lang.Object getSecurityContext()> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.os.CancellationSignal)> -> _SOURCE_
<android.net.wifi.p2p.WifiP2pManager: void discoverPeers(Channel,ActionListener)> -> _SOURCE_
<android.hardware.usb.UsbAccessory: java.lang.String getUri()> -> _SOURCE_
<com.android.internal.telephony.PhoneSubInfoController: java.lang.String getDeviceIdForPhone(int,java.lang.String)> -> _SOURCE_
<android.database.sqlite.SqliteWrapper: android.net.Uri insert(android.content.Context,android.content.ContentResolver,android.net.Uri,android.content.ContentValues)> -> _SOURCE_
<android.location.Location: java.lang.String getProvider()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getSimSerialNumber()> -> _SOURCE_
<android.media.Ringtone: android.net.Uri getUri()> -> _SOURCE_
<android.database.sqlite.SQLiteGlobal: int getJournalSizeLimit()> -> _SOURCE_
<com.android.server.location.ComprehensiveCountryDetector: android.location.Country getLocaleCountry()> -> _SOURCE_
<com.android.server.net.NetworkPolicyManagerService: void setRestrictBackground(boolean)> -> _SOURCE_
<android.location.Location: float getSpeed()> -> _SOURCE_
<android.location.LocationManager: boolean registerGnssStatusCallback(android.location.GnssStatus$Callback,android.os.Handler)> -> _SOURCE_
<com.android.server.location.GeofenceState: double getDistanceToBoundary()> -> _SOURCE_
<com.android.contacts.list.LegacyContactListAdapter: android.net.Uri getPersonUri(int)> -> _SOURCE_
<android.location.Address: android.os.Bundle getExtras()> -> _SOURCE_
<com.android.server.sip.SipService: android.net.sip.ISipSession getPendingSession(java.lang.String,java.lang.String)> -> _SOURCE_
<android.renderscript.Mesh$AllocationBuilder: int getCurrentVertexTypeIndex()> -> _SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getIsimDomain()> -> _SOURCE_
<com.android.server.location.MockProvider: com.android.internal.location.ProviderProperties getProperties()> -> _SOURCE_
<android.telecom.TelecomManager: PhoneAccountHandle getDefaultOutgoingPhoneAccount(java.lang.String)> -> _SOURCE_
<android.database.MatrixCursor: int getType(int)> -> _SOURCE_
<com.android.phone.PhoneInterfaceManager: android.os.Bundle getCellLocation()> -> _SOURCE_
<com.google.android.mms.pdu.NotificationInd: long getMessageSize()> -> _SOURCE_
<com.google.android.mms.util.SqliteWrapper: android.database.Cursor query(android.content.Context,android.content.ContentResolver,android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SOURCE_
<com.android.calendar.Utils: java.lang.String getDisplayedDatetime(long,long,long,java.lang.String,boolean,android.content.Context)> -> _SOURCE_
<com.android.internal.location.ILocationProvider$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getCdmaMin()> -> _SOURCE_
<com.android.internal.telephony.IccRecords: java.lang.String getVoiceMailNumber()> -> _SOURCE_
<android.accounts.AccountManagerService: void getAccountsByFeatures(android.accounts.IAccountManagerResponse,java.lang.String,[java.lang.String)> -> _SOURCE_
<com.android.internal.telephony.PhoneProxy: void getPreferredNetworkType(android.os.Message)> -> _SOURCE_
<com.google.android.mms.pdu.RetrieveConf: int getReadReport()> -> _SOURCE_
<com.android.phone.PhoneInterfaceManager: java.util.List getNeighboringCellInfo(java.lang.String)> -> _SOURCE_
<android.location.LocationRequest: long getFastestInterval()> -> _SOURCE_
<com.android.ex.chips.Queries$Query: android.net.Uri getContentFilterUri()> -> _SOURCE_
<android.app.DownloadManager: android.net.Uri getUriForDownloadedFile(long)> -> _SOURCE_
<android.database.sqlite.SQLiteCursor: java.lang.String[] getColumnNames()> -> _SOURCE_
<android.location.Address: int getMaxAddressLineIndex()> -> _SOURCE_
<android.accounts.AccountManagerService: android.accounts.AuthenticatorDescription[] getAuthenticatorTypes()> -> _SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getLine1Number()> -> _SOURCE_
<com.android.internal.telephony.SubscriptionController: android.telephony.SubscriptionInfo getActiveSubscriptionInfoForSimSlotIndex(int)> -> _SOURCE_
<android.provider.MediaStore$Audio$Genres: android.net.Uri getContentUri(java.lang.String)> -> _SOURCE_
<android.location.LocationManager: boolean addNmeaListener(android.location.OnNmeaMessageListener,android.os.Handler)> -> _SOURCE_
<org.xml.sax.helpers.NamespaceSupport$Context: java.lang.String getURI(java.lang.String)> -> _SOURCE_
<com.android.server.location.PassiveProvider: java.lang.String getName()> -> _SOURCE_
<android.accounts.AccountManager: android.os.Handler access$600(android.accounts.AccountManager)> -> _SOURCE_
<com.google.android.mms.pdu.RetrieveConf: byte[] getContentType()> -> _SOURCE_
<com.android.internal.telephony.PhoneProxy: java.lang.String getVoiceMailAlphaTag()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getCdmaEriText()> -> _SOURCE_
<com.android.server.location.PassiveProvider: long getStatusUpdateTime()> -> _SOURCE_
<android.telecom.TelecomManager: void startConference(List<Uri>,android.os.Bundle)> -> _SOURCE_
<android.location.IGeocodeProvider$Stub$Proxy: java.lang.String getFromLocationName(java.lang.String,double,double,double,double,int,android.location.GeocoderParams,java.util.List)> -> _SOURCE_
<android.accounts.AccountManager: android.accounts.AccountManagerFuture editProperties(java.lang.String,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> -> _SOURCE_
<android.telephony.TelephonyManager: List<NeighboringCellInfo> -> _SOURCE_
<com.android.internal.telephony.sip.SipPhone: java.lang.String getLine1Number()> -> _SOURCE_
<com.android.server.telecom.TelecomService$TelecomServiceImpl: boolean isTtySupported()> -> _SOURCE_
<android.location.Criteria: int getPowerRequirement()> -> _SOURCE_
<com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy: boolean updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)> -> _SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getDeviceSvn()> -> _SOURCE_
<gov.nist.javax.sip.header.ims.PAssociatedURI: javax.sip.address.URI getAssociatedURI()> -> _SOURCE_
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getMsisdn()> -> _SOURCE_
<android.telephony.gsm.SmsManager: void sendDataMessage(java.lang.String,java.lang.String,short,[byte,android.app.PendingIntent,android.app.PendingIntent)> -> _SOURCE_
<com.android.email.activity.MessageViewFragmentBase$MessageViewAttachmentInfo: android.net.Uri getUriForIntent(android.content.Context,long)> -> _SOURCE_
<com.android.gallery3d.gadget.MediaSetSource: android.graphics.Bitmap getImage(int)> -> _SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getDeviceId()> -> _SOURCE_
<android.location.LocationManager: Location getLastLocation()> -> _SOURCE_
<com.android.server.TelephonyRegistry: void listenForSubscriber(long,java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)> -> _SOURCE_
<com.android.camera.LocationManager: android.location.Location getCurrentLocation()> -> _SOURCE_
<android.net.sip.SipManager: void register(android.net.sip.SipProfile,int,android.net.sip.SipRegistrationListener)> -> _SOURCE_
<gov.nist.javax.sip.address.AddressImpl: javax.sip.address.URI getURI()> -> _SOURCE_
<android.database.CursorWrapper: int getPosition()> -> _SOURCE_
<com.google.android.mms.pdu.RetrieveConf: com.google.android.mms.pdu.EncodedStringValue getRetrieveText()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getVoiceMailNumber(int)> -> _SOURCE_
<android.telephony.SubscriptionManager: boolean isActiveSubscriptionId(int)> -> _SOURCE_
<com.android.contacts.list.ProfileAndContactsLoader: android.database.Cursor loadInBackground()> -> _SOURCE_
<com.android.internal.telephony.UiccSmsController: void sendTextForSubscriber(long,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getGroupIdLevel1(int)> -> _SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getVoiceMailAlphaTag()> -> _SOURCE_
<com.android.internal.telephony.sip.SipPhone: java.lang.String getIccSerialNumber()> -> _SOURCE_
<android.telephony.TelephonyManager: String[] getForbiddenPlmns()> -> _SOURCE_
<android.telephony.SubscriptionManager: java.util.List getActiveSubscriptionInfoList()> -> _SOURCE_
<com.android.internal.telephony.cdma.CDMALTEPhone: java.lang.String getSubscriberId()> -> _SOURCE_
<android.location.INetInitiatedListener$Stub: android.os.IBinder asBinder()> -> _SOURCE_
<android.telephony.gsm.SmsManager: java.util.ArrayList divideMessage(java.lang.String)> -> _SOURCE_
<android.telephony.TelephonyManager: boolean isModemEnabledForSlot(int)> -> _SOURCE_
<com.android.phone.PhoneInterfaceManager: java.lang.String[] getPcscfAddress(java.lang.String)> -> _SOURCE_
<com.android.providers.contacts.VoicemailContentProvider: java.lang.String getCallingPackage()> -> _SOURCE_
<android.location.LocationRequest: float getSmallestDisplacement()> -> _SOURCE_
<android.database.CursorWindow: android.database.CursorWindow newFromParcel(android.os.Parcel)> -> _SOURCE_
<com.google.android.mms.ContentType: java.util.ArrayList getImageTypes()> -> _SOURCE_
<android.accounts.AccountManagerService: void hasFeatures(android.accounts.IAccountManagerResponse,android.accounts.Account,[java.lang.String)> -> _SOURCE_
<com.google.android.mms.pdu.Base64: byte[] discardNonBase64(byte[])> -> _SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getCompleteVoiceMailNumber()> -> _SOURCE_
<android.location.ILocationManager$Stub$Proxy: java.lang.String getBestProvider(android.location.Criteria,boolean)> -> _SOURCE_
<com.android.contacts.editor.SelectAccountDialogFragment: android.app.Dialog onCreateDialog(android.os.Bundle)> -> _SOURCE_
<android.accounts.AccountManager: AccountManagerFuture<Account[]> -> _SOURCE_
<android.location.ICountryDetector$Stub$Proxy: android.location.Country detectCountry()> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.String[])> -> _SOURCE_
<com.android.internal.telephony.UiccSmsController: boolean disableCellBroadcastForSubscriber(long,int)> -> _SOURCE_
<android.location.LocationManager: boolean addGpsStatusListener(GpsStatus.Listener)> -> _SOURCE_
<android.renderscript.Allocation: android.renderscript.Allocation createTyped(android.renderscript.RenderScript,android.renderscript.Type)> -> _SOURCE_
<android.location.LocationManager: boolean addNmeaListener(java.util.concurrent.Executor,OnNmeaMessageListener)> -> _SOURCE_
<com.android.contacts.list.CustomContactListFilterActivity$CustomFilterConfigurationLoader: com.android.contacts.list.CustomContactListFilterActivity$AccountSet loadInBackground()> -> _SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String[] getIsimImpu()> -> _SOURCE_
<com.google.android.mms.pdu.NotificationInd: byte[] getMessageClass()> -> _SOURCE_
<com.android.server.telecom.TelecomService$TelecomServiceImpl: boolean isRinging()> -> _SOURCE_
<android.location.ILocationManager$Stub$Proxy: java.util.List getAllProviders()> -> _SOURCE_
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthTokenByFeatures(java.lang.String,java.lang.String,java.lang.String[],android.app.Activity,android.os.Bundle,android.os.Bundle,android.accounts.AccountManagerCallback,android.os.Handler)> -> _SOURCE_
<android.accounts.AccountManager: java.lang.String getUserData(android.accounts.Account,java.lang.String)> -> _SOURCE_
<com.google.android.mms.pdu.PduComposer: byte[] make()> -> _SOURCE_
<android.telephony.TelephonyManager: void listen(android.telephony.PhoneStateListener,int)> -> _SOURCE_
<com.android.internal.telephony.UiccSmsController: void sendStoredText(long,java.lang.String,android.net.Uri,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> -> _SOURCE_
<android.database.sqlite.SQLiteProgram: int getUniqueId()> -> _SOURCE_
<com.android.server.location.GeocoderProxy: java.lang.String getFromLocationName(java.lang.String,double,double,double,double,int,android.location.GeocoderParams,java.util.List)> -> _SOURCE_
<com.google.android.mms.pdu.RetrieveConf: byte[] getTransactionId()> -> _SOURCE_
<android.location.LocationManager: boolean addGpsStatusListener(android.location.GpsStatus$Listener)> -> _SOURCE_
<android.provider.Settings$System: android.net.Uri getUriFor(java.lang.String)> -> _SOURCE_
<android.accounts.AccountManager: Account[] getAccountsAsUser(int)> -> _SOURCE_
<com.android.mms.transaction.RetrieveTransaction: byte[] getPdu(java.lang.String)> -> _SOURCE_
<android.provider.Settings$NameValueTable: android.net.Uri getUriFor(android.net.Uri,java.lang.String)> -> _SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getSubscriberId()> -> _SOURCE_
<android.location.LocationRequest: int getQuality()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean isVideoCallingEnabled()> -> _SOURCE_
<android.telephony.TelephonyManager: void requestCellInfoUpdate(android.os.WorkSource,java.util.concurrent.Executor,CellInfoCallback)> -> _SOURCE_
<android.location.LocationManager: boolean registerGnssMeasurementsCallback(java.util.concurrent.Executor,GnssMeasurementsEvent.Callback)> -> _SOURCE_
<com.android.internal.telephony.UiccSmsController: boolean enableCellBroadcast(int,int)> -> _SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getVoiceMailNumber()> -> _SOURCE_
<android.location.LocationManager: boolean injectLocation(Location)> -> _SOURCE_
<com.google.android.picasastore.PicasaStoreFacade: android.net.Uri getAlbumCoverUri(long,java.lang.String)> -> _SOURCE_
<android.renderscript.Allocation: android.renderscript.Allocation createCubemapFromCubeFaces(android.renderscript.RenderScript,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap)> -> _SOURCE_
<android.telephony.TelephonyManager: List<EmergencyNumber>> -> _SOURCE_
<android.database.MergeCursor: java.lang.String[] getColumnNames()> -> _SOURCE_
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,LocationListener)> -> _SOURCE_
<com.google.android.picasasync.PicasaFacade: android.net.Uri getSettingsUri()> -> _SOURCE_
<android.widget.FrameLayout: boolean getConsiderGoneChildrenWhenMeasuring()> -> _SOURCE_
<android.telephony.SubscriptionManager: SubscriptionInfo getActiveSubscriptionInfoForSimSlotIndex(int)> -> _SOURCE_
<android.telephony.TelephonyManager: int getVoiceMessageCount()> -> _SOURCE_
<android.location.LocationManager: boolean registerGnssStatusCallback(android.location.GnssStatus$Callback)> -> _SOURCE_
<com.android.server.location.MockProvider: int getStatus(android.os.Bundle)> -> _SOURCE_
<com.android.internal.location.ILocationProvider$Stub$Proxy: long getStatusUpdateTime()> -> _SOURCE_
<android.telephony.cdma.CdmaCellLocation: int getSystemId()> -> _SOURCE_
<com.google.android.mms.pdu.PduBody: int getPartIndex(com.google.android.mms.pdu.PduPart)> -> _SOURCE_
<android.location.Location: double getLongitude()> -> _SOURCE_
<com.android.internal.telephony.IccSmsInterfaceManager: void sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> -> _SOURCE_
<android.telecom.TelecomManager: boolean endCall()> -> _SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getMsisdn()> -> _SOURCE_
<android.location.Country: int getSource()> -> _SOURCE_
<com.android.mms.data.Contact$ContactsCache: java.util.List getContactInfoForPhoneUris(android.os.Parcelable[])> -> _SOURCE_
<android.provider.MediaStore$Files: android.net.Uri getMtpReferencesUri(java.lang.String,long)> -> _SOURCE_
<com.android.internal.telephony.UiccSmsController: boolean updateMessageOnIccEf(java.lang.String,int,int,[byte)> -> _SOURCE_
<android.telephony.ims.RcsUceAdapter: boolean isUceSettingEnabled()> -> _SOURCE_
<android.location.LocationManager: boolean registerGnssStatusCallback(GnssStatusCallback,android.os.Handler)> -> _SOURCE_
<com.android.internal.telephony.IccCardProxy: java.lang.String getServiceProviderName()> -> _SOURCE_
<com.google.android.picasasync.PicasaFacade: android.net.Uri getUploadRecordsUri()> -> _SOURCE_
<com.google.android.mms.pdu.NotificationInd: byte[] getContentLocation()> -> _SOURCE_
<android.database.CursorWrapper: int getColumnIndexOrThrow(java.lang.String)> -> _SOURCE_
<com.google.android.mms.pdu.PduParser: com.google.android.mms.pdu.PduHeaders parseHeaders(java.io.ByteArrayInputStream)> -> _SOURCE_
<com.android.email.AttachmentInfo: android.net.Uri getUriForIntent(android.content.Context,long)> -> _SOURCE_
<android.accounts.AccountManager: android.accounts.Account[] getAccounts()> -> _SOURCE_
<com.android.internal.telephony.IccRecords: java.lang.String getMsisdnNumber()> -> _SOURCE_
<android.location.Address: java.lang.String getSubAdminArea()> -> _SOURCE_
<com.android.providers.contacts.VoicemailContentProvider: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String)> -> _SOURCE_
<com.android.server.location.MockProvider: long getStatusUpdateTime()> -> _SOURCE_
<android.database.CursorWrapper: short getShort(int)> -> _SOURCE_
<com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<com.android.providers.telephony.MmsProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQueryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)> -> _SOURCE_
<com.android.server.LocationManagerService: void removeGeofence(android.location.Geofence,android.app.PendingIntent,java.lang.String)> -> _SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getDeviceId()> -> _SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getDeviceId()> -> _SOURCE_
<com.android.internal.telephony.gsm.VoiceMailConstants: java.lang.String getVoiceMailNumber(java.lang.String)> -> _SOURCE_
<android.database.CursorWrapper: int getInt(int)> -> _SOURCE_
<com.android.internal.telephony.UiccSmsController: void sendMultipartText(java.lang.String,java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List)> -> _SOURCE_
<android.database.MergeCursor: java.lang.String getString(int)> -> _SOURCE_
<android.location.LocationProvider: int getAccuracy()> -> _SOURCE_
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getGroupIdLevel1()> -> _SOURCE_
<com.google.android.mms.pdu.PduBody: com.google.android.mms.pdu.PduPart getPartByContentLocation(java.lang.String)> -> _SOURCE_
<com.android.internal.telephony.PhoneBase: java.lang.String getCdmaMin()> -> _SOURCE_
<com.adobe.xmp.impl.XMPSchemaRegistryImpl: java.lang.String getNamespaceURI(java.lang.String)> -> _SOURCE_
<android.database.sqlite.SQLiteConnection: byte[] access$500()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getLine1AlphaTag()> -> _SOURCE_
<com.android.server.sip.SipService: void open(android.net.sip.SipProfile)> -> _SOURCE_
<com.android.server.LocationManagerService: android.location.Location getLastKnownLocation(java.lang.String)> -> _SOURCE_
<android.location.LocationManager: void requestLocationUpdates(LocationRequest,android.app.PendingIntent)> -> _SOURCE_
<com.google.android.mms.util.AbstractCache: java.lang.Object get(java.lang.Object)> -> _SOURCE_
<android.renderscript.Allocation: android.view.Surface getSurface()> -> _SOURCE_
<android.database.sqlite.SQLiteProgram: android.database.sqlite.SQLiteSession getSession()> -> _SOURCE_
<android.location.GeocoderParams: java.util.Locale getLocale()> -> _SOURCE_
<android.location.ILocationManager$Stub$Proxy: java.lang.String getFromLocation(double,double,int,android.location.GeocoderParams,java.util.List)> -> _SOURCE_
<com.google.android.mms.pdu.PduPart: byte[] getContentType()> -> _SOURCE_
<com.android.server.sip.SipService: android.net.sip.ISipSession createSession(android.net.sip.SipProfile,android.net.sip.ISipSessionListener,java.lang.String)> -> _SOURCE_
<com.android.server.sip.SipService: android.net.sip.SipProfile[] getListOfProfiles()> -> _SOURCE_
<android.location.ILocationListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<org.ccil.cowan.tagsoup.Schema: java.lang.String getURI()> -> _SOURCE_
<com.android.internal.telephony.CallerInfo: java.lang.String getCallerId(android.content.Context,java.lang.String)> -> _SOURCE_
<com.android.videoeditor.service.VideoEditorProject: android.net.Uri getExportedMovieUri()> -> _SOURCE_
<android.location.LocationManager: boolean addNmeaListener(GnssNmeaListener,android.os.Handler)> -> _SOURCE_
<android.database.MatrixCursor: short getShort(int)> -> _SOURCE_
<android.webkit.GeolocationPermissionsClassic: android.webkit.GeolocationPermissionsClassic getInstance()> -> _SOURCE_
<com.android.server.InputMethodManagerService: void showInputMethodAndSubtypeEnablerFromClient(com.android.internal.view.IInputMethodClient,java.lang.String)> -> _SOURCE_
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,java.util.concurrent.Executor,LocationListener)> -> _SOURCE_
<android.location.Address: java.lang.String getCountryCode()> -> _SOURCE_
<android.database.CursorToBulkCursorAdaptor: android.database.BulkCursorDescriptor getBulkCursorDescriptor()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean endCall()> -> _SOURCE_
<android.os.UserManager: android.graphics.Bitmap getUserIcon()> -> _SOURCE_
<android.telephony.SmsManager: void sendTextMessageWithoutPersisting(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> -> _SOURCE_
<android.database.sqlite.SQLiteQueryBuilder: android.database.Cursor query(android.database.sqlite.SQLiteDatabase,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getIccSerialNumber()> -> _SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getVoiceMailAlphaTag()> -> _SOURCE_
<com.google.android.mms.pdu.NotificationInd: long getExpiry()> -> _SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getPhoneName()> -> _SOURCE_
<android.database.sqlite.SQLiteProgram: android.database.sqlite.SQLiteDatabase getDatabase()> -> _SOURCE_
<com.google.android.mms.pdu.NotificationInd: int getContentClass()> -> _SOURCE_
<android.location.LocationManager: boolean registerGnssStatusCallback(GnssStatusCallback)> -> _SOURCE_
<android.accounts.AccountManager: android.accounts.Account[] getAccountsByType(java.lang.String)> -> _SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getMeid()> -> _SOURCE_
<com.android.server.telecom.TelecomService$TelecomServiceImpl: java.util.List getSimCallManagers()> -> _SOURCE_
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: boolean enableCellBroadcast(int)> -> _SOURCE_
<gov.nist.javax.sip.header.ims.SecurityAgree: java.lang.String getSecurityMechanism()> -> _SOURCE_
<android.location.Address: java.lang.String getLocality()> -> _SOURCE_
<com.android.internal.telephony.UiccSmsController: void sendTextForSubscriberWithSelfPermissions(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> -> _SOURCE_
<com.android.internal.telephony.sip.SipPhone: java.lang.String getDeviceId()> -> _SOURCE_
<android.accounts.AccountManager: void addOnAccountsUpdatedListener(OnAccountsUpdateListener,android.os.Handler,boolean)> -> _SOURCE_
<com.android.internal.telephony.UiccSmsController: boolean copyMessageToIccEf(java.lang.String,int,[byte,[byte)> -> _SOURCE_
<com.android.internal.telephony.UiccSmsController: boolean disableCellBroadcastRangeForSubscriber(int,int,int,int)> -> _SOURCE_
<android.telephony.TelephonyManager: boolean isIdle()> -> _SOURCE_
<android.accounts.IAccountManager$Stub$Proxy: android.accounts.Account[] getAccountsAsUser(java.lang.String,int)> -> _SOURCE_
<com.android.exchange.adapter.AccountSyncAdapter: java.lang.String getSyncKey()> -> _SOURCE_
<com.android.internal.telephony.SubscriptionController: int setDisplayName(java.lang.String,long)> -> _SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getVoiceMailNumber()> -> _SOURCE_
<android.database.MatrixCursor: float getFloat(int)> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getCdmaEriText(int)> -> _SOURCE_
<com.android.providers.media.MediaProvider: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String)> -> _SOURCE_
<android.database.AbstractCursor: android.database.CursorWindow getWindow()> -> _SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getIccSerialNumber()> -> _SOURCE_
<com.android.internal.telephony.SubscriptionController: int setDisplayNumber(java.lang.String,int)> -> _SOURCE_
<com.android.phone.PhoneInterfaceManager: void call(java.lang.String)> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getIsimImpi()> -> _SOURCE_
<com.google.android.mms.pdu.RetrieveConf: com.google.android.mms.pdu.EncodedStringValue[] getCc()> -> _SOURCE_
<android.accounts.AccountManager: android.accounts.IAccountManager access$000(android.accounts.AccountManager)> -> _SOURCE_
<android.telephony.TelephonyManager: boolean isRinging()> -> _SOURCE_
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: boolean disableCellBroadcast(int)> -> _SOURCE_
<android.location.ICountryListener$Stub: android.os.IBinder asBinder()> -> _SOURCE_
<com.android.server.location.LocationBasedCountryDetector: android.location.Country detectCountry()> -> _SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: android.telephony.CellLocation getCellLocation()> -> _SOURCE_
<android.os.UserManager: boolean isUserNameSet()> -> _SOURCE_
<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase getReadableDatabase()> -> _SOURCE_
<android.location.LocationManager: Location getLastKnownLocation(java.lang.String)> -> _SOURCE_
<android.location.LocationManager: boolean registerGnssMeasurementsCallback(GnssRequest,java.util.concurrent.Executor,GnssMeasurementsEvent.Callback)> -> _SOURCE_
<android.location.IGeocodeProvider$Stub: android.os.IBinder asBinder()> -> _SOURCE_
<android.telephony.TelephonyManager: String[] getForbiddenPlmns(int,int)> -> _SOURCE_
<com.android.server.location.LocationBasedCountryDetector: long getQueryLocationTimeout()> -> _SOURCE_
<com.google.android.mms.pdu.PduHeaders: long getLongInteger(int)> -> _SOURCE_
<android.accounts.AccountManager$Future2Task: java.lang.Object getResult(long,java.util.concurrent.TimeUnit)> -> _SOURCE_
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: void sendMultipartText(java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List)> -> _SOURCE_
<com.android.server.sip.SipService: boolean isRegistered(java.lang.String)> -> _SOURCE_
<com.android.server.location.LocationBasedCountryDetector: java.util.List getEnabledProviders()> -> _SOURCE_
<android.net.sip.SipManager: boolean isRegistered(java.lang.String)> -> _SOURCE_
<android.net.wifi.p2p.WifiP2pManager: void addLocalService(Channel,android.net.wifi.p2p.nsd.WifiP2pServiceInfo,ActionListener)> -> _SOURCE_
<com.android.internal.telephony.UiccSmsController: void sendTextForSubscriber(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> -> _SOURCE_
<android.location.LocationManager: void requestSingleUpdate(Criteria,android.app.PendingIntent)> -> _SOURCE_
<com.android.phone.PhoneInterfaceManager: java.lang.String getLine1NumberForDisplay(long)> -> _SOURCE_
<com.android.mms.util.Recycler$SmsRecycler: android.database.Cursor getAllThreads(android.content.Context)> -> _SOURCE_
<android.test.IsolatedContext$MockAccountManager: android.accounts.Account[] getAccounts()> -> _SOURCE_
<android.provider.MediaStore$Images$Media: android.net.Uri getContentUri(java.lang.String)> -> _SOURCE_
<com.android.exchange.adapter.EmailSyncAdapter: java.lang.String getSyncKey()> -> _SOURCE_
<android.provider.MediaStore$Files: android.net.Uri getContentUri(java.lang.String)> -> _SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getCdmaPrlVersion()> -> _SOURCE_
<org.xml.sax.helpers.AttributesImpl: java.lang.String getURI(int)> -> _SOURCE_
<android.location.ICountryDetector$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<com.android.server.am.ActivityRecord: com.android.server.am.UriPermissionOwner getUriPermissionsLocked()> -> _SOURCE_
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: boolean copyMessageToIccEf(int,[byte,[byte)> -> _SOURCE_
<com.android.server.location.LocationBasedCountryDetector: android.location.Location getLastKnownLocation()> -> _SOURCE_
<android.location.LocationManager: void requestSingleUpdate(java.lang.String,android.location.LocationListener,android.os.Looper)> -> _SOURCE_
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getCompleteVoiceMailNumber()> -> _SOURCE_
<com.android.contacts.calllog.PhoneNumberHelper: java.lang.CharSequence getDisplayNumber(java.lang.CharSequence,java.lang.CharSequence)> -> _SOURCE_
<gov.nist.javax.sip.message.SIPRequest: javax.sip.address.URI getRequestURI()> -> _SOURCE_
<android.telecom.TelecomManager: boolean isRinging()> -> _SOURCE_
<android.widget.TextView: android.text.TextDirectionHeuristic getTextDirectionHeuristic()> -> _SOURCE_
<com.android.server.LocationManagerService: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)> -> _SOURCE_
<android.telephony.TelephonyManager: android.os.PersistableBundle getCarrierConfig()> -> _SOURCE_
<android.location.Address: double getLongitude()> -> _SOURCE_
<com.android.vcard.VCardEntry: java.util.ArrayList constructInsertOperations(android.content.ContentResolver,java.util.ArrayList)> -> _SOURCE_
<com.android.server.location.PassiveProvider: int getStatus(android.os.Bundle)> -> _SOURCE_
<com.google.android.mms.pdu.NotificationInd: int getDeliveryReport()> -> _SOURCE_
<android.location.LocationManager: boolean addNmeaListener(android.location.OnNmeaMessageListener)> -> _SOURCE_
<android.content.res.XmlBlock$Parser: java.lang.String getNamespaceUri(int)> -> _SOURCE_
<android.telephony.TelephonyManager: int getVoiceNetworkType(int)> -> _SOURCE_
<com.android.providers.calendar.CalendarDatabaseHelper: com.android.common.content.SyncStateContentProviderHelper getSyncState()> -> _SOURCE_
<android.location.LocationManager: java.util.List getProviders(boolean)> -> _SOURCE_
<android.database.CursorWindow: float getFloat(int,int)> -> _SOURCE_
<android.telephony.TelephonyManager: int getVoiceNetworkType()> -> _SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: android.telephony.CellLocation getCellLocation()> -> _SOURCE_
<android.provider.ContactsContract$SyncState: android.util.Pair getWithUri(android.content.ContentProviderClient,android.accounts.Account)> -> _SOURCE_
<android.database.IContentObserver$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getDeviceSvn()> -> _SOURCE_
<com.android.internal.telephony.SubscriptionController: void clearDefaultsForInactiveSubIds()> -> _SOURCE_
<android.net.sip.SipManager: android.net.sip.SipSession getSessionFor(android.content.Intent)> -> _SOURCE_
<android.location.Address: java.lang.String getAddressLine(int)> -> _SOURCE_
<android.telephony.cdma.CdmaCellLocation: int getBaseStationId()> -> _SOURCE_
<com.android.server.sip.SipService: void setRegistrationListener(java.lang.String,android.net.sip.ISipSessionListener,java.lang.String)> -> _SOURCE_
<android.webkit.HTML5VideoView: boolean getPauseDuringPreparing()> -> _SOURCE_
<android.database.MergeCursor: float getFloat(int)> -> _SOURCE_
<android.location.LocationManager: void requestLocationUpdates(LocationRequest,java.util.concurrent.Executor,LocationListener)> -> _SOURCE_
<com.android.server.LocationManagerService$Receiver: android.location.ILocationListener getListener()> -> _SOURCE_
<android.location.GpsSatellite: int getPrn()> -> _SOURCE_
<android.net.sip.SipProfile: javax.sip.address.SipURI getUri()> -> _SOURCE_
<com.android.internal.telephony.UiccSmsController: void sendMultipartTextForSubscriber(int,java.lang.String,java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List)> -> _SOURCE_
<com.android.server.sip.SipService: void setRegistrationListener(java.lang.String,android.net.sip.ISipSessionListener)> -> _SOURCE_
<com.google.android.mms.pdu.DeliveryInd: int getStatus()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getMsisdn()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean isRadioOn()> -> _SOURCE_
<android.location.Address: java.lang.String getThoroughfare()> -> _SOURCE_
<com.android.server.sip.SipService: void open(android.net.sip.SipProfile,java.lang.String)> -> _SOURCE_
<android.renderscript.Allocation: android.renderscript.Type getType()> -> _SOURCE_
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getVoiceMailNumber()> -> _SOURCE_
<android.telephony.gsm.SmsManager: void sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)> -> _SOURCE_
<com.android.internal.telephony.CallTracker: java.lang.String checkForTestEmergencyNumber(java.lang.String)> -> _SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getImei()> -> _SOURCE_
<com.android.server.location.GpsLocationProvider: android.location.IGpsStatusProvider getGpsStatusProvider()> -> _SOURCE_
<android.accounts.AccountManager: java.lang.Exception access$400(android.accounts.AccountManager,int,java.lang.String)> -> _SOURCE_
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getCompleteVoiceMailNumber()> -> _SOURCE_
<com.android.server.MmsServiceBroker$BinderService: void downloadMessage(long,java.lang.String,java.lang.String,android.net.Uri,android.os.Bundle,android.app.PendingIntent)> -> _SOURCE_
<com.android.server.LocationManagerService: boolean addGnssNavigationMessageListener(android.location.IGnssNavigationMessageListener,java.lang.String)> -> _SOURCE_
<android.location.IGpsStatusProvider$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<com.android.server.sip.SipService: android.net.sip.SipProfile[] getListOfProfiles(java.lang.String)> -> _SOURCE_
<com.android.internal.telephony.UiccSmsController: boolean enableCellBroadcastRangeForSubscriber(int,int,int,int)> -> _SOURCE_
<android.location.LocationManager: void requestSingleUpdate(java.lang.String,android.app.PendingIntent)> -> _SOURCE_
<com.android.internal.policy.impl.keyguard.KeyguardSecurityModel: com.android.internal.policy.impl.keyguard.KeyguardSecurityModel$SecurityMode getSecurityMode()> -> _SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getEsn()> -> _SOURCE_
<com.android.phone.PhoneInterfaceManager: boolean endCallForSubscriber(int)> -> _SOURCE_
<com.android.internal.telephony.PhoneBase: java.lang.String getIccSerialNumber()> -> _SOURCE_
<android.location.LocationManager: boolean addNmeaListener(OnNmeaMessageListener)> -> _SOURCE_
<android.renderscript.Allocation: android.renderscript.Allocation createSized(android.renderscript.RenderScript,android.renderscript.Element,int)> -> _SOURCE_
<android.accounts.AccountManager$Future2Task: android.accounts.AccountManager$Future2Task start()> -> _SOURCE_
<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()> -> _SOURCE_
<com.android.internal.telephony.UiccSmsController: void sendDataForSubscriberWithSelfPermissions(int,java.lang.String,java.lang.String,java.lang.String,int,[byte,android.app.PendingIntent,android.app.PendingIntent)> -> _SOURCE_
<android.telephony.SubscriptionManager: void addOnSubscriptionsChangedListener(android.telephony.SubscriptionManager$OnSubscriptionsChangedListener)> -> _SOURCE_
<com.android.internal.telephony.SubscriptionController: int setIconTint(int,int)> -> _SOURCE_
<com.android.systemui.statusbar.phone.PhoneStatusBar: com.android.systemui.statusbar.phone.PhoneStatusBarView makeStatusBarView()> -> _SOURCE_
<com.android.internal.telephony.UiccSmsController: boolean enableCellBroadcastForSubscriber(int,int,int)> -> _SOURCE_
<com.android.internal.telephony.PhoneProxy: java.lang.String getActiveApnHost(java.lang.String)> -> _SOURCE_
<android.database.AbstractWindowedCursor: double getDouble(int)> -> _SOURCE_
<com.google.android.mms.util.SqliteWrapper: android.net.Uri insert(android.content.Context,android.content.ContentResolver,android.net.Uri,android.content.ContentValues)> -> _SOURCE_
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: void sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> -> _SOURCE_
<com.google.android.mms.pdu.PduBody: com.google.android.mms.pdu.PduPart getPartByFileName(java.lang.String)> -> _SOURCE_
<libcore.net.http.RequestHeaders: java.net.URI getUri()> -> _SOURCE_
<android.database.AbstractCursor: java.lang.String getColumnName(int)> -> _SOURCE_
<android.location.LocationManager: void removeUpdates(android.app.PendingIntent)> -> _SOURCE_
<android.location.Geofence: double getLongitude()> -> _SOURCE_
<android.net.wifi.rtt.WifiRttManager: void startRanging(RangingRequest,java.util.concurrent.Executor,RangingResultCallback)> -> _SOURCE_
<android.location.GpsStatus: java.lang.Iterable getSatellites()> -> _SOURCE_
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,boolean,android.accounts.AccountManagerCallback,android.os.Handler)> -> _SOURCE_
<android.telephony.SmsManager: java.util.ArrayList divideMessage(java.lang.String)> -> _SOURCE_
<android.location.ICountryDetector$Stub: android.os.IBinder asBinder()> -> _SOURCE_
<com.android.internal.telephony.UiccSmsController: java.util.List getAllMessagesFromIccEfForSubscriber(int,java.lang.String)> -> _SOURCE_
<com.android.internal.telephony.UiccSmsController: void sendData(java.lang.String,java.lang.String,java.lang.String,int,[byte,android.app.PendingIntent,android.app.PendingIntent)> -> _SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getLine1Number()> -> _SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getLine1AlphaTag()> -> _SOURCE_
<android.accounts.AccountManagerService: android.accounts.Account[] getAccounts(java.lang.String)> -> _SOURCE_
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: boolean disableCellBroadcastRange(int,int)> -> _SOURCE_
<com.android.server.telecom.TelecomService$TelecomServiceImpl: boolean isVoiceMailNumber(android.telecom.PhoneAccountHandle,java.lang.String)> -> _SOURCE_
<android.provider.MediaStore$Audio$Genres: android.net.Uri getContentUriForAudioId(java.lang.String,int)> -> _SOURCE_
<com.android.server.LocationManagerService: void requestLocationUpdates(android.location.LocationRequest,android.location.ILocationListener,android.app.PendingIntent,java.lang.String)> -> _SOURCE_
<android.database.AbstractCursor: android.net.Uri getNotificationUri()> -> _SOURCE_
<android.location.GpsSatellite: float getSnr()> -> _SOURCE_
<android.accounts.IAccountManager$Stub$Proxy: java.lang.String getPassword(android.accounts.Account)> -> _SOURCE_
<android.database.CursorWrapper: long getLong(int)> -> _SOURCE_
<com.google.android.mms.pdu.NotificationInd: com.google.android.mms.pdu.EncodedStringValue getFrom()> -> _SOURCE_
<android.location.LocationManager: void requestSingleUpdate(android.location.Criteria,android.location.LocationListener,android.os.Looper)> -> _SOURCE_
<android.net.Uri: android.net.Uri getCanonicalUri()> -> _SOURCE_
<android.net.sip.SipManager: void unregister(android.net.sip.SipProfile,android.net.sip.SipRegistrationListener)> -> _SOURCE_
<com.android.internal.telephony.sip.SipPhone: java.lang.String getPhoneName()> -> _SOURCE_
<libcore.net.http.ResponseHeaders: java.net.URI getUri()> -> _SOURCE_
<com.google.android.picasasync.PicasaFacade: android.net.Uri getUploadUri(long)> -> _SOURCE_
<gov.nist.javax.sip.header.AuthenticationHeader: javax.sip.address.URI getURI()> -> _SOURCE_
<com.android.server.telecom.TelecomService$TelecomServiceImpl: java.lang.String getLine1Number(android.telecom.PhoneAccountHandle)> -> _SOURCE_
<android.database.AbstractWindowedCursor: java.lang.String getString(int)> -> _SOURCE_
<com.android.ex.chips.RecipientEntry: android.net.Uri getPhotoThumbnailUri()> -> _SOURCE_
<com.android.server.telecom.TelecomServiceImpl: boolean isRinging()> -> _SOURCE_
<com.android.server.LocationManagerService: boolean addGpsNavigationMessageListener(android.location.IGpsNavigationMessageListener,java.lang.String)> -> _SOURCE_
<android.database.sqlite.SQLiteProgram: int getConnectionFlags()> -> _SOURCE_
<android.telephony.SmsCbLocation: java.lang.String getPlmn()> -> _SOURCE_
<android.renderscript.Allocation: android.renderscript.Allocation createCubemapFromBitmap(android.renderscript.RenderScript,android.graphics.Bitmap,android.renderscript.Allocation$MipmapControl,int)> -> _SOURCE_
<android.database.BulkCursorToCursorAdaptor: java.lang.String[] getColumnNames()> -> _SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getEsn()> -> _SOURCE_
<android.location.IGeocodeProvider$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: void sendText(java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> -> _SOURCE_
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,LocationListener,android.os.Looper)> -> _SOURCE_
<com.android.internal.telephony.SubscriptionController: int setDataRoaming(int,int)> -> _SOURCE_
<android.location.LocationManager: boolean registerGnssNavigationMessageCallback(java.util.concurrent.Executor,GnssNavigationMessage.Callback)> -> _SOURCE_
<com.android.server.LocationManagerService: java.lang.String getFromLocation(double,double,int,android.location.GeocoderParams,java.util.List)> -> _SOURCE_
<com.android.server.sip.SipService: android.net.sip.ISipSession getPendingSession(java.lang.String)> -> _SOURCE_
<com.android.server.LocationManagerService: boolean addGpsMeasurementsListener(android.location.IGpsMeasurementsListener,java.lang.String)> -> _SOURCE_
<com.android.server.net.NetworkPolicyManagerService: android.net.NetworkPolicy[] getNetworkPolicies()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getLine1Number()> -> _SOURCE_
<android.location.LocationManager: void getCurrentLocation(java.lang.String,android.os.CancellationSignal,java.util.concurrent.Executor,Consumer<Location>)> -> _SOURCE_
<com.android.internal.telephony.UiccSmsController: boolean copyMessageToIccEfForSubscriber(long,java.lang.String,int,[byte,[byte)> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getVoiceMailAlphaTag(int)> -> _SOURCE_
<android.net.sip.SipManager: void setRegistrationListener(java.lang.String,android.net.sip.SipRegistrationListener)> -> _SOURCE_
<android.accounts.AccountManagerService: android.accounts.Account[] getAccountsAsUser(java.lang.String,int)> -> _SOURCE_
<com.android.calendar.CalendarUtils$TimeZoneUtils: java.lang.String getTimeZone(android.content.Context,java.lang.Runnable)> -> _SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.accounts.AccountManagerService: android.accounts.Account[] getAccountsFromCacheLocked(android.accounts.AccountManagerService$UserAccounts,java.lang.String)> -> _SOURCE_
<com.android.contacts.interactions.PhoneNumberInteraction$PhoneDisambiguationDialogFragment: android.app.Dialog onCreateDialog(android.os.Bundle)> -> _SOURCE_
<android.database.BulkCursorProxy: android.os.Bundle getExtras()> -> _SOURCE_
<com.google.android.mms.pdu.PduPersister: com.google.android.mms.pdu.PduPersister getPduPersister(android.content.Context)> -> _SOURCE_
<com.android.internal.telephony.PhoneProxy: java.lang.String getImei()> -> _SOURCE_
<android.database.sqlite.SQLiteGlobal: int getWALAutoCheckpoint()> -> _SOURCE_
<com.google.android.mms.pdu.RetrieveConf: byte[] getMessageId()> -> _SOURCE_
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: void sendData(java.lang.String,java.lang.String,java.lang.String,int,[byte,android.app.PendingIntent,android.app.PendingIntent)> -> _SOURCE_
<com.google.android.mms.pdu.PduBody: int getPartsNum()> -> _SOURCE_
<com.android.phone.PhoneInterfaceManager: java.lang.String getDeviceId()> -> _SOURCE_
<android.location.Address: java.lang.String getPostalCode()> -> _SOURCE_
<android.telephony.SubscriptionManager: List<SubscriptionInfo> -> _SOURCE_
<android.database.MergeCursor: int getInt(int)> -> _SOURCE_
<com.android.server.LocationManagerService: java.lang.String getBestProvider(android.location.Criteria,boolean)> -> _SOURCE_
<com.android.internal.telephony.UiccSmsController: void sendStoredText(int,java.lang.String,android.net.Uri,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> -> _SOURCE_
<android.telephony.SmsCbLocation: int getLac()> -> _SOURCE_
<com.google.android.mms.pdu.MultimediaMessagePdu: com.google.android.mms.pdu.PduBody getBody()> -> _SOURCE_
<com.android.providers.telephony.MmsSmsProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SOURCE_
<com.google.android.mms.util.PduCache: com.google.android.mms.util.PduCache getInstance()> -> _SOURCE_
<android.location.Geocoder: java.util.List getFromLocationName(java.lang.String,int)> -> _SOURCE_
<android.accounts.AccountManager: void addOnAccountsUpdatedListener(android.accounts.OnAccountsUpdateListener,android.os.Handler,boolean)> -> _SOURCE_
<android.database.MergeCursor: int getType(int)> -> _SOURCE_
<com.android.internal.telephony.PhoneProxy: java.lang.String getLine1AlphaTag()> -> _SOURCE_
<com.android.internal.telephony.SubscriptionController: java.util.List getActiveSubscriptionInfoList()> -> _SOURCE_
<android.accounts.AccountManagerService: android.accounts.AccountAndUser[] getRunningAccounts()> -> _SOURCE_
<android.location.LocationManager: GpsStatus getGpsStatus(GpsStatus)> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getLine1AlphaTag(int)> -> _SOURCE_
<android.location.LocationManager: boolean addNmeaListener(android.location.GpsStatus$NmeaListener)> -> _SOURCE_
<android.accounts.AccountManager: android.accounts.AuthenticatorDescription[] getAuthenticatorTypes()> -> _SOURCE_
<android.database.AbstractWindowedCursor: int getInt(int)> -> _SOURCE_
<android.accounts.AccountManager: java.util.HashMap access$1300(android.accounts.AccountManager)> -> _SOURCE_
<com.android.phone.PhoneInterfaceManager: java.lang.String getLine1AlphaTagForDisplay(int)> -> _SOURCE_
<android.net.wifi.WifiManager: List<WifiConfiguration> -> _SOURCE_
<android.database.AbstractWindowedCursor: byte[] getBlob(int)> -> _SOURCE_
<com.google.android.mms.pdu.ReadRecInd: byte[] getMessageId()> -> _SOURCE_
<java.lang.System: java.lang.SecurityManager getSecurityManager()> -> _SOURCE_
<android.database.AbstractCursor: byte[] getBlob(int)> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getMsisdn(int)> -> _SOURCE_
<com.google.android.mms.pdu.SendReq: int getReadReport()> -> _SOURCE_
<com.android.server.location.LocationBasedCountryDetector: java.lang.String getCountryFromLocation(android.location.Location)> -> _SOURCE_
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getIccSerialNumber()> -> _SOURCE_
<android.telephony.SmsManager: void downloadMultimediaMessage(android.content.Context,java.lang.String,android.net.Uri,android.os.Bundle,android.app.PendingIntent)> -> _SOURCE_
<android.provider.SyncStateContract$Helpers: android.util.Pair getWithUri(android.content.ContentProviderClient,android.net.Uri,android.accounts.Account)> -> _SOURCE_
<android.database.CursorWrapper: double getDouble(int)> -> _SOURCE_
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: void sendData(java.lang.String,java.lang.String,int,[byte,android.app.PendingIntent,android.app.PendingIntent)> -> _SOURCE_
<android.telephony.TelephonyManager: int getSubscriptionId(android.telecom.PhoneAccountHandle)> -> _SOURCE_
<com.android.internal.telephony.SubscriptionController: java.util.List getSubInfoUsingSlotId(int)> -> _SOURCE_
<android.telecom.TelecomManager: boolean isVoiceMailNumber(PhoneAccountHandle,java.lang.String)> -> _SOURCE_
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getIsimImpi()> -> _SOURCE_
<android.telephony.TelephonyManager: int isMultiSimSupported()> -> _SOURCE_
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: boolean updateMessageOnIccEf(int,int,[byte)> -> _SOURCE_
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: boolean disableCellBroadcastRange(int,int)> -> _SOURCE_
<android.location.Country: long getTimestamp()> -> _SOURCE_
<com.android.providers.contacts.VoicemailContentProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,[java.lang.String)> -> _SOURCE_
<android.location.LocationManager: android.location.Location getLastLocation()> -> _SOURCE_
<android.net.wifi.p2p.WifiP2pManager: void createGroup(Channel,ActionListener)> -> _SOURCE_
<com.android.server.location.GpsXtraDownloader: byte[] doDownload(java.lang.String,boolean,java.lang.String,int)> -> _SOURCE_
<android.database.CursorWrapper: int getType(int)> -> _SOURCE_
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: java.util.ArrayList getContactNamesByNumber(java.lang.String)> -> _SOURCE_
<com.android.mms.transaction.ReadRecTransaction: byte[] getPdu(java.lang.String)> -> _SOURCE_
<android.location.LocationManager: void requestSingleUpdate(Criteria,LocationListener,android.os.Looper)> -> _SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getSubscriberId()> -> _SOURCE_
<com.android.browser.BrowserBookmarksPage$OpenAllInTabsTask: android.database.Cursor doInBackground(java.lang.Void[])> -> _SOURCE_
<com.android.server.content.ContentService: java.util.List getCurrentSyncs()> -> _SOURCE_
<com.android.phone.PhoneInterfaceManager: java.util.List getNeighboringCellInfo()> -> _SOURCE_
<android.location.LocationManager: boolean addNmeaListener(OnNmeaMessageListener,android.os.Handler)> -> _SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getDeviceSvn()> -> _SOURCE_
<android.database.AbstractCursor: int getColumnIndex(java.lang.String)> -> _SOURCE_
<android.net.wifi.WifiManager: void startLocalOnlyHotspot(LocalOnlyHotspotCallback,android.os.Handler)> -> _SOURCE_
<com.android.phone.PhoneInterfaceManager: java.util.List getAllCellInfo(java.lang.String)> -> _SOURCE_
<com.google.android.mms.pdu.PduParser: byte[] getWapString(java.io.ByteArrayInputStream,int)> -> _SOURCE_
<com.android.internal.telephony.UiccSmsController: boolean enableCellBroadcastForSubscriber(long,int)> -> _SOURCE_
<android.database.CursorWindow: int getNumRows()> -> _SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getEsn()> -> _SOURCE_
<com.google.android.mms.pdu.MultimediaMessagePdu: com.google.android.mms.pdu.EncodedStringValue getSubject()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getVisualVoicemailPackageName()> -> _SOURCE_
<com.android.internal.telephony.SubscriptionController: int getActiveSubInfoCount()> -> _SOURCE_
<android.location.LocationRequest: long getExpireAt()> -> _SOURCE_
<com.android.internal.telephony.sip.SipPhone: java.lang.String getVoiceMailAlphaTag()> -> _SOURCE_
<android.location.ILocationManager$Stub$Proxy: com.android.internal.location.ProviderProperties getProviderProperties(java.lang.String)> -> _SOURCE_
<com.android.internal.policy.impl.keyguard.KeyguardSecurityViewFlipper: com.android.internal.policy.impl.keyguard.KeyguardSecurityView getSecurityView()> -> _SOURCE_
<android.net.sip.SipManager: boolean isOpened(java.lang.String)> -> _SOURCE_
<com.android.mms.util.Recycler$MmsRecycler: android.database.Cursor getAllThreads(android.content.Context)> -> _SOURCE_
<android.telephony.TelephonyManager: CellLocation getCellLocation()> -> _SOURCE_
<com.android.internal.telephony.PhoneProxy: java.lang.String getMeid()> -> _SOURCE_
<android.location.Address: java.lang.String getFeatureName()> -> _SOURCE_
<android.telephony.cdma.CdmaCellLocation: int getBaseStationLongitude()> -> _SOURCE_
<android.accounts.AbstractAccountAuthenticator: android.os.Bundle getAccountRemovalAllowed(android.accounts.AccountAuthenticatorResponse,android.accounts.Account)> -> _SOURCE_
<com.android.server.location.GpsLocationProvider: long getStatusUpdateTime()> -> _SOURCE_
<com.android.internal.telephony.UiccSmsController: boolean disableCellBroadcast(int,int)> -> _SOURCE_
<android.location.ILocationManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<com.android.contacts.activities.PhotoSelectionActivity$PhotoHandler: long getWritableEntityId()> -> _SOURCE_
<android.location.Address: java.lang.String getAdminArea()> -> _SOURCE_
<android.renderscript.Allocation: android.renderscript.Allocation createTyped(android.renderscript.RenderScript,android.renderscript.Type,int)> -> _SOURCE_
<android.database.CursorToBulkCursorAdaptor: android.database.CursorWindow getWindow(int)> -> _SOURCE_
<com.android.internal.telephony.SubscriptionController: java.util.List getAllSubInfoList()> -> _SOURCE_
<android.accounts.AccountManager: Account[] getAccountsByType(java.lang.String)> -> _SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getVoiceMailAlphaTag()> -> _SOURCE_
<com.android.internal.telephony.IccSmsInterfaceManager: boolean updateMessageOnIccEf(java.lang.String,int,int,[byte)> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getIsimDomain()> -> _SOURCE_
<android.database.CursorWindow: int getInt(int,int)> -> _SOURCE_
<com.android.server.LockSettingsService: boolean getBoolean(java.lang.String,boolean,int)> -> _SOURCE_
<android.net.sip.SipManager: android.net.sip.SipAudioCall makeAudioCall(java.lang.String,java.lang.String,android.net.sip.SipAudioCall$Listener,int)> -> _SOURCE_
<android.location.LocationProvider: int getPowerRequirement()> -> _SOURCE_
<android.location.Address: java.lang.String getCountryName()> -> _SOURCE_
<android.hardware.camera2.CameraManager: boolean isConcurrentSessionConfigurationSupported(@NonNull,SessionConfiguration>)> -> _SOURCE_
<android.accounts.AccountManager$AmsTask: android.os.Bundle getResult()> -> _SOURCE_
<com.android.providers.contacts.CallLogProvider: int delete(android.net.Uri,java.lang.String,[java.lang.String)> -> _SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getVoiceMailNumber()> -> _SOURCE_
<com.android.internal.telephony.SubscriptionController: int setDisplayNumber(java.lang.String,long)> -> _SOURCE_
<android.telephony.TelephonyManager: int getDataNetworkType()> -> _SOURCE_
<com.android.internal.telephony.sip.SipPhone: java.lang.String getLine1AlphaTag()> -> _SOURCE_
<com.android.emailcommon.utility.AttachmentUtilities: android.net.Uri getAttachmentUri(long,long)> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: java.util.Map getSyncedTables()> -> _SOURCE_
<com.google.android.mms.pdu.PduPart: byte[] getData()> -> _SOURCE_
<com.android.internal.telephony.UiccSmsController: void sendDataForSubscriber(int,java.lang.String,java.lang.String,java.lang.String,int,[byte,android.app.PendingIntent,android.app.PendingIntent)> -> _SOURCE_
<android.location.Address: java.lang.String getSubThoroughfare()> -> _SOURCE_
<android.database.sqlite.SQLiteGlobal: int getDefaultPageSize()> -> _SOURCE_
<android.database.MergeCursor: byte[] getBlob(int)> -> _SOURCE_
<android.accounts.AccountManagerService: android.accounts.AccountManagerService$UserAccounts getUserAccounts(int)> -> _SOURCE_
<android.database.AbstractWindowedCursor: long getLong(int)> -> _SOURCE_
<com.google.android.mms.pdu.NotifyRespInd: int getReportAllowed()> -> _SOURCE_
<android.database.sqlite.SQLiteGlobal: java.lang.String getDefaultSyncMode()> -> _SOURCE_
<android.database.CursorWindow: int getType(int,int)> -> _SOURCE_
<android.location.Location: long getElapsedRealtimeNanos()> -> _SOURCE_
<android.database.AbstractCursor: android.os.Bundle getExtras()> -> _SOURCE_
<android.database.MatrixCursor: java.lang.String getString(int)> -> _SOURCE_
<com.android.internal.telephony.UiccSmsController: void sendDataForSubscriber(long,java.lang.String,java.lang.String,java.lang.String,int,[byte,android.app.PendingIntent,android.app.PendingIntent)> -> _SOURCE_
<android.location.LocationManager: android.location.GpsStatus getGpsStatus(android.location.GpsStatus)> -> _SOURCE_
<com.google.android.mms.pdu.SendReq: com.google.android.mms.pdu.EncodedStringValue[] getCc()> -> _SOURCE_
<com.android.internal.location.GpsNetInitiatedHandler: java.lang.String getDialogTitle(com.android.internal.location.GpsNetInitiatedHandler$GpsNiNotification,android.content.Context)> -> _SOURCE_
<com.android.internal.telephony.UiccPhoneBookController: java.util.List getAdnRecordsInEf(int)> -> _SOURCE_
<android.telephony.cdma.CdmaCellLocation: int getBaseStationLatitude()> -> _SOURCE_
<android.location.Criteria: int getSpeedAccuracy()> -> _SOURCE_
<android.media.RingtoneManager: android.net.Uri getValidRingtoneUri(android.content.Context)> -> _SOURCE_
<android.database.sqlite.SQLiteGlobal: int getWALConnectionPoolSize()> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: java.util.ArrayList getDbStats()> -> _SOURCE_
<android.telephony.TelephonyManager: void requestCellInfoUpdate(java.util.concurrent.Executor,CellInfoCallback)> -> _SOURCE_
<com.android.internal.telephony.cdma.CDMALTEPhone: java.lang.String getDeviceSvn()> -> _SOURCE_
<com.android.server.location.GpsLocationProvider: int getStatus(android.os.Bundle)> -> _SOURCE_
<com.android.internal.telephony.UiccPhoneBookController: boolean updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)> -> _SOURCE_
<android.content.CursorLoader: android.net.Uri getUri()> -> _SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getSubscriberId()> -> _SOURCE_
<android.net.wifi.WifiManager: List<ScanResult>> -> _SOURCE_
<com.android.internal.telephony.IccSmsInterfaceManager: void sendData(java.lang.String,java.lang.String,java.lang.String,int,[byte,android.app.PendingIntent,android.app.PendingIntent)> -> _SOURCE_
<com.android.contacts.vcard.NfcImportVCardActivity$ImportTask: com.android.contacts.vcard.ImportRequest doInBackground(com.android.contacts.vcard.VCardService[])> -> _SOURCE_
<com.android.internal.telephony.UiccSmsController: boolean enableCellBroadcastRangeForSubscriber(long,int,int)> -> _SOURCE_
<com.google.android.picasasync.UploadTaskEntry: android.net.Uri getContentUri()> -> _SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getPhoneName()> -> _SOURCE_
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getVoiceMailAlphaTag()> -> _SOURCE_
<com.android.server.LocationManagerService: java.lang.String getFromLocationName(java.lang.String,double,double,double,double,int,android.location.GeocoderParams,java.util.List)> -> _SOURCE_
<com.android.server.LocationManagerService: void reportLocation(android.location.Location,boolean)> -> _SOURCE_
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteSession createSession()> -> _SOURCE_
<com.android.server.telecom.TelecomService$TelecomServiceImpl: java.util.List getPhoneAccountsSupportingScheme(java.lang.String)> -> _SOURCE_
<com.android.phone.PhoneInterfaceManager: int getNetworkType()> -> _SOURCE_
<com.android.phone.PhoneInterfaceManager: boolean isVideoCallingEnabled()> -> _SOURCE_
<android.location.Address: double getLatitude()> -> _SOURCE_
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture getAccountsByTypeAndFeatures(java.lang.String,java.lang.String[],android.accounts.AccountManagerCallback,android.os.Handler)> -> _SOURCE_
<com.android.internal.telephony.sip.SipPhone: java.lang.String getSipUri()> -> _SOURCE_
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getGroupIdLevel1()> -> _SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: android.telephony.CellLocation getCellLocation()> -> _SOURCE_
<com.google.android.mms.pdu.SendReq: long getExpiry()> -> _SOURCE_
<com.android.server.LocationManagerService: void requestGeofence(android.location.LocationRequest,android.location.Geofence,android.app.PendingIntent,java.lang.String)> -> _SOURCE_
<android.database.AbstractWindowedCursor: short getShort(int)> -> _SOURCE_
<android.telephony.TelephonyManager: NetworkScan requestNetworkScan(NetworkScanRequest,TelephonyScanManager.NetworkScanCallback)> -> _SOURCE_
<android.database.CursorWindow: java.lang.String getName()> -> _SOURCE_
<android.accounts.AccountManagerService: android.accounts.AccountAndUser[] getAllAccounts()> -> _SOURCE_
<com.android.internal.telephony.SubscriptionController: java.util.List getSubInfoUsingIccId(java.lang.String)> -> _SOURCE_
<android.location.LocationManager: boolean addNmeaListener(GpsStatus.NmeaListener)> -> _SOURCE_
<android.net.wifi.p2p.WifiP2pManager: void discoverServices(Channel,ActionListener)> -> _SOURCE_
<android.telephony.TelephonyManager: boolean isOffhook()> -> _SOURCE_
<com.android.phone.PhoneInterfaceManager: android.os.Bundle getCellLocation(java.lang.String)> -> _SOURCE_
<com.android.server.accounts.AccountManagerService: void hasFeatures(android.accounts.IAccountManagerResponse,android.accounts.Account,[java.lang.String)> -> _SOURCE_
<com.android.server.LockSettingsService: void systemReady()> -> _SOURCE_
<com.android.providers.downloads.DownloadInfo$Reader: com.android.providers.downloads.DownloadInfo newDownloadInfo(android.content.Context,com.android.providers.downloads.SystemFacade)> -> _SOURCE_
<com.android.server.location.LocationProviderProxy: java.lang.String getConnectedPackageName()> -> _SOURCE_
<org.apache.http.message.BasicRequestLine: java.lang.String getUri()> -> _SOURCE_
<com.android.mms.transaction.Transaction: byte[] getPdu(java.lang.String)> -> _SOURCE_
<android.net.sip.SipManager: void open(android.net.sip.SipProfile)> -> _SOURCE_
<android.location.LocationManager: void requestLocationUpdates(long,float,Criteria,LocationListener,android.os.Looper)> -> _SOURCE_
<com.android.providers.telephony.MmsSmsDatabaseHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: java.util.List getAttachedDbs()> -> _SOURCE_
<android.renderscript.Allocation: android.renderscript.Allocation createFromString(android.renderscript.RenderScript,java.lang.String,int)> -> _SOURCE_
<android.database.sqlite.SQLiteCursor: int getColumnIndex(java.lang.String)> -> _SOURCE_
<com.google.android.mms.pdu.PduPersister: android.database.Cursor getPendingMessages(long)> -> _SOURCE_
<com.google.android.mms.pdu.SendConf: byte[] getMessageId()> -> _SOURCE_
<com.google.android.mms.pdu.PduPart: byte[] getContentLocation()> -> _SOURCE_
<com.android.internal.telephony.sip.SipPhone: java.lang.String getMeid()> -> _SOURCE_
<android.telephony.TelephonyManager: com.android.internal.telephony.CellNetworkScanResult getAvailableNetworks()> -> _SOURCE_
<com.android.internal.telephony.UiccSmsController: void sendStoredMultipartText(int,java.lang.String,android.net.Uri,java.lang.String,java.util.List,java.util.List)> -> _SOURCE_
<android.renderscript.Allocation: android.renderscript.Type typeFromBitmap(android.renderscript.RenderScript,android.graphics.Bitmap,android.renderscript.Allocation$MipmapControl)> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: java.lang.String getLabel()> -> _SOURCE_
<com.google.android.mms.pdu.DeliveryInd: com.google.android.mms.pdu.EncodedStringValue[] getTo()> -> _SOURCE_
<android.telephony.cdma.CdmaCellLocation: int getNetworkId()> -> _SOURCE_
<com.android.internal.telephony.SubscriptionController: android.telephony.SubscriptionInfo getActiveSubscriptionInfoForIccId(java.lang.String)> -> _SOURCE_
<android.telephony.TelephonyManager: int getPreferredOpportunisticDataSubscription()> -> _SOURCE_
<android.location.GpsStatus: int getTimeToFirstFix()> -> _SOURCE_
<android.telephony.TelephonyManager: void sendUssdRequest(java.lang.String,UssdResponseCallback,android.os.Handler)> -> _SOURCE_
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: void sendMultipartText(java.lang.String,java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List)> -> _SOURCE_
<com.google.android.mms.pdu.PduPart: byte[] getContentId()> -> _SOURCE_
<android.provider.Settings$Global: android.net.Uri getUriFor(java.lang.String)> -> _SOURCE_
<com.android.server.location.MockProvider: java.lang.String getName()> -> _SOURCE_
<android.database.sqlite.SqliteWrapper: android.database.Cursor query(android.content.Context,android.content.ContentResolver,android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SOURCE_
<android.database.CursorWindow: byte[] getBlob(int,int)> -> _SOURCE_
<android.location.GeocoderParams: java.lang.String getClientPackage()> -> _SOURCE_
<android.telecom.TelecomManager: boolean isTtySupported()> -> _SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getIccSerialNumber()> -> _SOURCE_
<android.location.GpsStatus: int getMaxSatellites()> -> _SOURCE_
<com.google.android.mms.pdu.PduPart: byte[] getContentTransferEncoding()> -> _SOURCE_
<android.app.WallpaperManager: boolean wallpaperSupportsWcg(int)> -> _SOURCE_
<android.location.Geofence: int getType()> -> _SOURCE_
<com.google.android.mms.pdu.PduBody: com.google.android.mms.pdu.PduPart getPartByContentId(java.lang.String)> -> _SOURCE_
<com.android.server.accounts.AccountManagerService: android.accounts.Account[] getAccountsAsUser(java.lang.String,int)> -> _SOURCE_
<android.location.Geofence: float getRadius()> -> _SOURCE_
<gov.nist.javax.sip.header.RequestLine: gov.nist.javax.sip.address.GenericURI getUri()> -> _SOURCE_
<android.accounts.AccountManager: android.accounts.AccountManagerFuture hasFeatures(android.accounts.Account,java.lang.String[],android.accounts.AccountManagerCallback,android.os.Handler)> -> _SOURCE_
<com.android.providers.contacts.ContactsDatabaseHelper: com.android.common.content.SyncStateContentProviderHelper getSyncState()> -> _SOURCE_
<com.android.internal.telephony.sip.SipPhone: java.lang.String getDeviceSvn()> -> _SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getVoiceMailNumber()> -> _SOURCE_
<android.telephony.TelephonyManager: int getNetworkType(int)> -> _SOURCE_
<com.android.phone.PhoneInterfaceManager: void call(java.lang.String,java.lang.String)> -> _SOURCE_
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)> -> _SOURCE_
<com.android.server.location.GeocoderProxy: java.lang.String getFromLocation(double,double,int,android.location.GeocoderParams,java.util.List)> -> _SOURCE_
<android.app.WallpaperManager: android.graphics.drawable.Drawable peekFastDrawable()> -> _SOURCE_
<com.android.internal.telephony.UiccSmsController: java.util.List getAllMessagesFromIccEf(java.lang.String)> -> _SOURCE_
<android.location.Address: java.lang.String getUrl()> -> _SOURCE_
<android.location.LocationProvider: java.lang.String getName()> -> _SOURCE_
<android.net.wifi.WifiManager: void addSuggestionConnectionStatusListener(java.util.concurrent.Executor,SuggestionConnectionStatusListener)> -> _SOURCE_
<com.android.providers.downloads.DownloadInfo: android.net.Uri getMyDownloadsUri()> -> _SOURCE_
<android.app.ActivityManagerProxy: android.os.ParcelFileDescriptor openContentUri(android.net.Uri)> -> _SOURCE_
<com.android.internal.telephony.DataConnectionTracker: java.lang.String apnIdToType(int)> -> _SOURCE_
<com.android.providers.media.MediaProvider: android.net.Uri getAlbumArtOutputUri(com.android.providers.media.MediaProvider$DatabaseHelper,android.database.sqlite.SQLiteDatabase,long,android.net.Uri)> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getLine1Number(int)> -> _SOURCE_
<android.os.UserManager: java.lang.String getUserName()> -> _SOURCE_
<com.android.internal.telephony.sip.SipPhone: java.lang.String getEsn()> -> _SOURCE_
<com.android.internal.telephony.PhoneProxy: java.lang.String getIccSerialNumber()> -> _SOURCE_
<com.android.internal.telephony.SubscriptionController: int clearSubInfo()> -> _SOURCE_
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: boolean enableCellBroadcastRange(int,int)> -> _SOURCE_
<android.database.IContentObserver$Stub: android.os.IBinder asBinder()> -> _SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getIsimImpi()> -> _SOURCE_
<com.android.server.sip.SipService: void close(java.lang.String,java.lang.String)> -> _SOURCE_
<android.accounts.AccountManager: java.lang.String blockingGetAuthToken(android.accounts.Account,java.lang.String,boolean)> -> _SOURCE_
<com.google.android.mms.pdu.GenericPdu: int getMessageType()> -> _SOURCE_
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)> -> _SOURCE_
<com.google.android.mms.pdu.ReadOrigInd: com.google.android.mms.pdu.EncodedStringValue getFrom()> -> _SOURCE_
<com.google.android.mms.pdu.PduPart: android.net.Uri getDataUri()> -> _SOURCE_
<com.android.internal.telephony.PhoneProxy: android.telephony.CellLocation getCellLocation()> -> _SOURCE_
<libcore.net.http.HttpEngine: java.net.URI getUri()> -> _SOURCE_
<com.google.android.mms.pdu.PduPart: byte[] getName()> -> _SOURCE_
<android.hardware.camera2.CameraManager: void openCamera(java.lang.String,java.util.concurrent.Executor,CameraDevice.StateCallback)> -> _SOURCE_
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> -> _SOURCE_
<android.telephony.CellLocation: android.telephony.CellLocation getEmpty()> -> _SOURCE_
<com.android.internal.telephony.gsm.SIMRecords: java.lang.String getVoiceMailNumber()> -> _SOURCE_
<com.android.server.LocationManagerService: java.util.List getAllProviders()> -> _SOURCE_
<com.android.phone.PhoneInterfaceManager: java.util.List getAllCellInfo()> -> _SOURCE_
<android.renderscript.Mesh$AllocationBuilder: int getCurrentIndexSetIndex()> -> _SOURCE_
<android.telecom.TelecomManager: void showInCallScreen(boolean)> -> _SOURCE_
<android.database.ContentObserver: android.database.IContentObserver getContentObserver()> -> _SOURCE_
<com.google.android.mms.pdu.SendConf: int getResponseStatus()> -> _SOURCE_
<android.telephony.TelephonyManager: void sendVisualVoicemailSmsForSubscriber(int,java.lang.String,int,java.lang.String,android.app.PendingIntent)> -> _SOURCE_
<com.android.internal.telephony.PhoneProxy: java.lang.String getCdmaEriText()> -> _SOURCE_
<android.net.sip.SipManager: void open(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.SipRegistrationListener)> -> _SOURCE_
<com.android.internal.telephony.SubscriptionController: int setDataRoaming(int,long)> -> _SOURCE_
<com.android.launcher2.LauncherSettings$Favorites: android.net.Uri getContentUri(long,boolean)> -> _SOURCE_
<android.database.MatrixCursor: double getDouble(int)> -> _SOURCE_
<com.android.mms.data.Contact: android.net.Uri getUri()> -> _SOURCE_
<com.google.android.mms.pdu.PduPersister: byte[] getBytes(java.lang.String)> -> _SOURCE_
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: int getContactsSize()> -> _SOURCE_
<com.android.providers.downloads.DownloadProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> -> _SOURCE_
<com.android.internal.telephony.IccRecords: java.lang.String getServiceProviderName()> -> _SOURCE_
<com.android.server.LocationManagerService: void requestLocationUpdatesPI(java.lang.String,android.location.Criteria,long,float,boolean,android.app.PendingIntent)> -> _SOURCE_
<com.google.android.mms.pdu.AcknowledgeInd: byte[] getTransactionId()> -> _SOURCE_
<com.android.calendar.selectcalendars.SelectSyncedCalendarsMultiAccountAdapter: android.database.Cursor getChildrenCursor(android.database.Cursor)> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getDeviceId()> -> _SOURCE_
<com.android.server.MmsServiceBroker$BinderService: void sendStoredMessage(int,java.lang.String,android.net.Uri,android.os.Bundle,android.app.PendingIntent)> -> _SOURCE_
<android.telephony.TelephonyManager: int getVoiceMessageCount(int)> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getDeviceId(int)> -> _SOURCE_
<com.android.server.MmsServiceBroker$BinderService: void downloadMessage(int,java.lang.String,java.lang.String,android.net.Uri,android.os.Bundle,android.app.PendingIntent)> -> _SOURCE_
<android.telephony.SubscriptionManager: android.telephony.SubscriptionInfo getActiveSubscriptionInfoForSimSlotIndex(int)> -> _SOURCE_
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: boolean copyMessageToIccEf(java.lang.String,int,[byte,[byte)> -> _SOURCE_
<android.app.WallpaperManager: android.os.ParcelFileDescriptor getWallpaperFile(int)> -> _SOURCE_
<com.android.internal.telephony.UiccSmsController: void sendStoredMultipartText(long,java.lang.String,android.net.Uri,java.lang.String,java.util.List,java.util.List)> -> _SOURCE_
<android.telephony.gsm.GsmCellLocation: int getLac()> -> _SOURCE_
<com.android.server.LockSettingsService: java.lang.String getString(java.lang.String,java.lang.String,int)> -> _SOURCE_
<android.provider.Telephony$Mms: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],java.lang.String,java.lang.String)> -> _SOURCE_
<com.android.phone.PhoneUtils: com.android.internal.telephony.Phone getSipPhoneFromUri(com.android.internal.telephony.CallManager,java.lang.String)> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getDeviceSoftwareVersion()> -> _SOURCE_
<com.google.android.mms.pdu.SendConf: byte[] getTransactionId()> -> _SOURCE_
<com.android.mms.ui.SlideshowEditActivity$SlideListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> -> _SOURCE_
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getVoiceMailAlphaTag()> -> _SOURCE_
<com.android.server.LocationManagerService: void removeUpdates(android.location.ILocationListener,android.app.PendingIntent,java.lang.String)> -> _SOURCE_
<com.google.android.picasasync.PicasaFacade: android.net.Uri getAlbumsUri()> -> _SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getImei()> -> _SOURCE_
<com.android.providers.contacts.CallLogProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,[java.lang.String)> -> _SOURCE_
<com.google.android.mms.pdu.PduHeaders: com.google.android.mms.pdu.EncodedStringValue[] getEncodedStringValues(int)> -> _SOURCE_
<android.net.wifi.rtt.WifiRttManager: void startRanging(android.os.WorkSource,RangingRequest,java.util.concurrent.Executor,RangingResultCallback)> -> _SOURCE_
<android.database.MergeCursor: double getDouble(int)> -> _SOURCE_
<com.android.server.sip.SipService: void close(java.lang.String)> -> _SOURCE_
<com.android.internal.telephony.UiccSmsController: void sendMultipartTextForSubscriber(int,java.lang.String,java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List,boolean)> -> _SOURCE_
<com.android.camera.PhotoModule$ImageNamer: android.net.Uri getUri()> -> _SOURCE_
<com.android.server.telecom.TelecomServiceImpl: boolean isTtySupported()> -> _SOURCE_
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getVoiceMailNumber()> -> _SOURCE_
<com.android.phone.PhoneInterfaceManager: java.lang.String getLine1AlphaTagForDisplay(long)> -> _SOURCE_
<android.view.inputmethod.InputMethodManager: void showInputMethodAndSubtypeEnabler(java.lang.String)> -> _SOURCE_
<android.provider.Settings$Secure: android.net.Uri getUriFor(java.lang.String)> -> _SOURCE_
<com.android.internal.telephony.IccSmsInterfaceManager: void sendMultipartText(java.lang.String,java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List)> -> _SOURCE_
<com.google.android.mms.util.PduCacheEntry: int getMessageBox()> -> _SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getLine1Number()> -> _SOURCE_
<org.apache.http.impl.client.RequestWrapper: java.net.URI getURI()> -> _SOURCE_
<com.android.internal.telephony.SubscriptionController: android.telephony.SubInfoRecord getSubInfoForSubscriber(long)> -> _SOURCE_
<com.android.internal.telephony.UiccSmsController: void sendTextForSubscriber(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent,boolean)> -> _SOURCE_
<android.database.CursorWrapper: int getColumnCount()> -> _SOURCE_
<android.accounts.AccountManager: android.accounts.Account[] getAccountsByTypeAsUser(java.lang.String,android.os.UserHandle)> -> _SOURCE_
<com.android.internal.telephony.UiccSmsController: void sendText(java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> -> _SOURCE_
<android.renderscript.Allocation: android.renderscript.Allocation createCubemapFromCubeFaces(android.renderscript.RenderScript,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.renderscript.Allocation$MipmapControl,int)> -> _SOURCE_
<org.kxml2.io.KXmlParser: java.lang.String getNamespaceUri(int)> -> _SOURCE_
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener,android.os.Looper)> -> _SOURCE_
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,boolean,android.accounts.AccountManagerCallback,android.os.Handler)> -> _SOURCE_
<android.provider.MediaStore$Audio$Artists: android.net.Uri getContentUri(java.lang.String)> -> _SOURCE_
<android.database.sqlite.SQLiteCursor: int getCount()> -> _SOURCE_
<android.location.Location: float getBearing()> -> _SOURCE_
<android.database.sqlite.SQLiteOpenHelper: java.lang.String getDatabaseName()> -> _SOURCE_
<com.android.phone.PhoneInterfaceManager: boolean endCall()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean isDataRoamingEnabled()> -> _SOURCE_
<com.android.email.service.AttachmentDownloadService$AccountManagerStub: int getNumberOfAccounts()> -> _SOURCE_
<com.android.internal.telephony.UiccSmsController: boolean updateMessageOnIccEfForSubscriber(long,java.lang.String,int,int,[byte)> -> _SOURCE_
<android.location.ILocationManager$Stub$Proxy: android.location.Location getLastLocation(android.location.LocationRequest,java.lang.String)> -> _SOURCE_
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthTokenLabel(java.lang.String,java.lang.String,android.accounts.AccountManagerCallback,android.os.Handler)> -> _SOURCE_
<android.provider.MediaStore$Files: android.net.Uri getMtpObjectsUri(java.lang.String,long)> -> _SOURCE_
<android.location.LocationManager: void getCurrentLocation(LocationRequest,android.os.CancellationSignal,java.util.concurrent.Executor,Consumer<Location>)> -> _SOURCE_
<com.android.server.telecom.TelecomServiceImpl: void showInCallScreen(boolean)> -> _SOURCE_
<com.android.internal.telephony.PhoneProxy: java.lang.String getCdmaMin()> -> _SOURCE_
<com.google.android.picasasync.PicasaFacade: android.net.Uri getPostPhotosUri()> -> _SOURCE_
<android.database.BulkCursorNative: android.os.IBinder asBinder()> -> _SOURCE_
<android.content.pm.VerificationParams: android.net.Uri getOriginatingURI()> -> _SOURCE_
<com.android.internal.telephony.IccPhoneBookInterfaceManager: java.util.List getAdnRecordsInEf(int)> -> _SOURCE_
<com.android.exchange.adapter.AbstractSyncAdapter: java.lang.String getSyncKey()> -> _SOURCE_
<android.location.Criteria: int getVerticalAccuracy()> -> _SOURCE_
<android.database.BulkCursorToCursorAdaptor: android.database.IContentObserver getObserver()> -> _SOURCE_
<com.android.internal.telephony.IccSmsInterfaceManager: void sendData(java.lang.String,java.lang.String,int,[byte,android.app.PendingIntent,android.app.PendingIntent)> -> _SOURCE_
<com.google.android.picasasync.PicasaFacade: android.net.Uri getUploadsUri()> -> _SOURCE_
<com.android.internal.telephony.SubscriptionController: int addSubInfoRecord(java.lang.String,int)> -> _SOURCE_
<android.location.LocationManager: void addProximityAlert(double,double,float,long,android.app.PendingIntent)> -> _SOURCE_
<android.location.LocationManager: void addGeofence(LocationRequest,Geofence,android.app.PendingIntent)> -> _SOURCE_
<android.database.AbstractCursor: boolean getWantsAllOnMoveCalls()> -> _SOURCE_
<android.database.DatabaseUtils$InsertHelper: int getColumnIndex(java.lang.String)> -> _SOURCE_
<android.database.CursorWrapper: boolean getWantsAllOnMoveCalls()> -> _SOURCE_
<com.google.android.mms.ContentType: java.util.ArrayList getAudioTypes()> -> _SOURCE_
<android.database.AbstractWindowedCursor: float getFloat(int)> -> _SOURCE_
<android.net.wifi.p2p.WifiP2pManager: void requestPeers(Channel,PeerListListener)> -> _SOURCE_
<android.database.BulkCursorProxy: android.database.CursorWindow getWindow(int)> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()> -> _SOURCE_
<com.android.server.TelephonyRegistry: void addOnSubscriptionsChangedListener(java.lang.String,com.android.internal.telephony.IOnSubscriptionsChangedListener)> -> _SOURCE_
<com.android.server.telecom.TelecomService$TelecomServiceImpl: void showInCallScreen(boolean)> -> _SOURCE_
<android.telecom.TelecomManager: boolean isInCall()> -> _SOURCE_
<com.android.mms.transaction.NotificationTransaction: byte[] getPdu(java.lang.String)> -> _SOURCE_
<com.android.internal.telephony.SubscriptionController: int getAllSubInfoCount()> -> _SOURCE_
<android.location.LocationManager: void requestLocationUpdates(long,float,Criteria,java.util.concurrent.Executor,LocationListener)> -> _SOURCE_
<com.android.server.MmsServiceBroker$BinderService: void sendMessage(long,java.lang.String,android.net.Uri,java.lang.String,android.os.Bundle,android.app.PendingIntent)> -> _SOURCE_
<android.location.Address: java.util.Locale getLocale()> -> _SOURCE_
<android.renderscript.Allocation: int getBytesSize()> -> _SOURCE_
<android.location.Geocoder: java.util.List getFromLocationName(java.lang.String,int,double,double,double,double)> -> _SOURCE_
<android.renderscript.Allocation: int getUsage()> -> _SOURCE_
<com.android.phone.PhoneInterfaceManager: boolean isSimPinEnabled()> -> _SOURCE_
<android.media.RingtoneManager: android.net.Uri getDefaultUri(int)> -> _SOURCE_
<android.telephony.SmsCbLocation: int getCid()> -> _SOURCE_
<android.database.AbstractWindowedCursor: int getType(int)> -> _SOURCE_
<com.android.internal.telephony.IPhoneStateListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.telephony.TelephonyManager: void call(java.lang.String,java.lang.String)> -> _SOURCE_
<com.google.android.mms.pdu.MultimediaMessagePdu: long getDate()> -> _SOURCE_
<android.database.MatrixCursor: long getLong(int)> -> _SOURCE_
<com.google.android.mms.pdu.SendReq: byte[] getMessageClass()> -> _SOURCE_
<com.android.server.location.ComprehensiveCountryDetector: android.location.Country getLastKnownLocationBasedCountry()> -> _SOURCE_
<com.android.server.am.PendingIntentRecord: void send(int,android.content.Intent,java.lang.String,android.content.IIntentReceiver,java.lang.String,android.os.Bundle)> -> _SOURCE_
<com.android.internal.telephony.UiccSmsController: boolean copyMessageToIccEfForSubscriber(int,java.lang.String,int,[byte,[byte)> -> _SOURCE_
<com.android.server.telecom.TelecomService$TelecomServiceImpl: boolean isInCall()> -> _SOURCE_
<com.android.server.telecom.TelecomService$TelecomServiceImpl: android.telecom.PhoneAccountHandle getDefaultOutgoingPhoneAccount(java.lang.String)> -> _SOURCE_
<android.telecom.TelecomManager: java.lang.String getVoiceMailNumber(PhoneAccountHandle)> -> _SOURCE_
<com.android.server.location.GpsLocationProvider: android.location.INetInitiatedListener getNetInitiatedListener()> -> _SOURCE_
<android.provider.MediaStore$Video$Thumbnails: android.net.Uri getContentUri(java.lang.String)> -> _SOURCE_
<com.android.internal.telephony.AdnRecord: java.lang.String getNumber()> -> _SOURCE_
<com.google.android.mms.pdu.ReadOrigInd: com.google.android.mms.pdu.EncodedStringValue[] getTo()> -> _SOURCE_
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAccountsByTypeAndFeatures(java.lang.String,java.lang.String[],android.accounts.AccountManagerCallback,android.os.Handler)> -> _SOURCE_
<android.net.sip.SipManager: android.net.sip.SipAudioCall makeAudioCall(android.net.sip.SipProfile,android.net.sip.SipProfile,android.net.sip.SipAudioCall$Listener,int)> -> _SOURCE_
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: boolean copyMessageToIccEf(int,[byte,[byte)> -> _SOURCE_
<android.telephony.TelephonyManager: int getRadioPowerState()> -> _SOURCE_
<android.telephony.TelephonyManager: android.telephony.CellLocation getCellLocation()> -> _SOURCE_
<com.android.providers.contacts.VoicemailContentProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> -> _SOURCE_
<android.renderscript.Allocation: android.renderscript.Allocation createFromBitmap(android.renderscript.RenderScript,android.graphics.Bitmap)> -> _SOURCE_
<com.android.server.telecom.TelecomServiceImpl: boolean isInCall()> -> _SOURCE_
<com.android.internal.telephony.IccSmsInterfaceManager: void sendText(java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> -> _SOURCE_
<android.location.LocationManager: void requestLocationUpdates(long,float,android.location.Criteria,android.location.LocationListener,android.os.Looper)> -> _SOURCE_
<com.android.server.location.GpsLocationProvider: java.lang.String getName()> -> _SOURCE_
<com.android.internal.telephony.PhoneProxy: java.lang.String getVoiceMailNumber()> -> _SOURCE_
<android.provider.MediaStore$Video$Media: android.net.Uri getContentUri(java.lang.String)> -> _SOURCE_
<android.accounts.AccountManagerService: android.accounts.Account[] getAccounts(int)> -> _SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getImei()> -> _SOURCE_
<com.android.server.am.ServiceRecord$StartItem: com.android.server.am.UriPermissionOwner getUriPermissionsLocked()> -> _SOURCE_
<android.database.sqlite.SQLiteQueryBuilder: android.database.Cursor query(android.database.sqlite.SQLiteDatabase,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getVoiceMailNumber()> -> _SOURCE_
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getDeviceSvn()> -> _SOURCE_
<com.android.internal.telephony.SubscriptionController: int setDisplayName(java.lang.String,int)> -> _SOURCE_
<com.android.internal.telephony.IccSmsInterfaceManager: java.util.List getAllMessagesFromIccEf(java.lang.String)> -> _SOURCE_
<com.google.android.mms.pdu.NotifyRespInd: byte[] getTransactionId()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: android.os.Bundle getCellLocation()> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: long getPageSize()> -> _SOURCE_
<android.renderscript.Allocation: android.renderscript.Allocation createFromBitmapResource(android.renderscript.RenderScript,android.content.res.Resources,int)> -> _SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getMeid()> -> _SOURCE_
<android.net.wifi.p2p.WifiP2pManager: void createGroup(Channel,WifiP2pConfig,ActionListener)> -> _SOURCE_
<android.provider.MediaStore$Audio$Genres$Members: android.net.Uri getContentUri(java.lang.String,long)> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: long getMaximumSize()> -> _SOURCE_
<com.google.android.mms.util.DrmConvertSession: byte[] convert(byte[],int)> -> _SOURCE_
<com.android.internal.telephony.UiccPhoneBookController: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<android.accounts.AccountManager: android.accounts.AccountManagerFuture removeAccount(android.accounts.Account,android.accounts.AccountManagerCallback,android.os.Handler)> -> _SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getCdmaEriText()> -> _SOURCE_
<com.android.camera.VideoModule$VideoNamer: android.net.Uri getUri()> -> _SOURCE_
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getSubscriberId()> -> _SOURCE_
<android.location.LocationManager: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)> -> _SOURCE_
<com.android.server.location.LocationProviderProxy: long getStatusUpdateTime()> -> _SOURCE_
<android.database.CursorWrapper: android.os.Bundle getExtras()> -> _SOURCE_
<com.android.server.location.LocationProviderProxy: java.lang.String getName()> -> _SOURCE_
<com.android.server.location.GpsLocationProvider: com.android.internal.location.ProviderProperties getProperties()> -> _SOURCE_
<com.android.internal.telephony.PhoneSubInfoController: java.lang.String getDeviceId(java.lang.String)> -> _SOURCE_
<com.android.internal.telephony.PhoneProxy: java.lang.String getMsisdn()> -> _SOURCE_
<android.accounts.AccountManager$Future2Task: java.lang.Object getResult()> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase$1: android.database.sqlite.SQLiteSession initialValue()> -> _SOURCE_
<com.android.internal.telephony.UiccSmsController: boolean enableCellBroadcastRange(int,int)> -> _SOURCE_
<com.android.internal.telephony.PhoneProxy: java.lang.String getPhoneName()> -> _SOURCE_
<android.accounts.AccountManager: android.accounts.AccountManager get(android.content.Context)> -> _SOURCE_
<android.provider.MediaStore$Files: android.net.Uri getMtpObjectsUri(java.lang.String)> -> _SOURCE_
<com.google.android.mms.pdu.SendReq: byte[] getTransactionId()> -> _SOURCE_
<android.database.AbstractCursor: int getPosition()> -> _SOURCE_
<android.database.MergeCursor: int getCount()> -> _SOURCE_
<android.telecom.TelecomManager: void placeCall(android.net.Uri,android.os.Bundle)> -> _SOURCE_
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getLine1AlphaTag()> -> _SOURCE_
<com.android.server.sip.SipService: void open3(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.ISipSessionListener,java.lang.String)> -> _SOURCE_
<android.net.wifi.p2p.WifiP2pManager: void connect(Channel,WifiP2pConfig,ActionListener)> -> _SOURCE_
<com.android.internal.telephony.UiccSmsController: void sendMultipartTextForSubscriber(long,java.lang.String,java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List)> -> _SOURCE_
<android.location.LocationRequest: long getInterval()> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: int getVersion()> -> _SOURCE_
<android.telecom.TelecomManager: boolean isInManagedCall()> -> _SOURCE_
<android.telephony.TelephonyManager: int getNumberOfModemsWithSimultaneousDataConnections()> -> _SOURCE_
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getIsimDomain()> -> _SOURCE_
<com.google.android.mms.pdu.PduPart: byte[] getContentDisposition()> -> _SOURCE_
<android.telephony.gsm.GsmCellLocation: int getPsc()> -> _SOURCE_
<android.accounts.AccountManagerService$Session: android.accounts.IAccountManagerResponse getResponseAndClose()> -> _SOURCE_
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,boolean,android.accounts.AccountManagerCallback,android.os.Handler)> -> _SOURCE_
<android.net.wifi.p2p.WifiP2pManager: void requestGroupInfo(Channel,GroupInfoListener)> -> _SOURCE_
<com.google.android.mms.pdu.ReadOrigInd: byte[] getMessageId()> -> _SOURCE_
<com.android.internal.telephony.gsm.SIMRecords: java.lang.String getMsisdnNumber()> -> _SOURCE_
<com.google.android.picasasync.Authorizer: java.lang.String getAuthToken(java.lang.String)> -> _SOURCE_
<android.database.sqlite.SQLiteCursor: android.database.sqlite.SQLiteDatabase getDatabase()> -> _SOURCE_
<com.google.android.mms.pdu.RetrieveConf: int getRetrieveStatus()> -> _SOURCE_
<com.google.android.mms.util.PduCacheEntry: com.google.android.mms.pdu.GenericPdu getPdu()> -> _SOURCE_
<com.android.server.location.ComprehensiveCountryDetector: android.location.Country getNetworkBasedCountry()> -> _SOURCE_
<android.webkit.GeolocationPermissions: android.webkit.GeolocationPermissions getInstance()> -> _SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getVoiceMailAlphaTag()> -> _SOURCE_
<android.telephony.SubscriptionManager: int getActiveSubscriptionInfoCount()> -> _SOURCE_
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: java.util.List getAllMessagesFromIccEf()> -> _SOURCE_
<com.google.android.mms.pdu.SendReq: long getMessageSize()> -> _SOURCE_
<android.location.Location: android.os.Bundle getExtras()> -> _SOURCE_
<com.android.internal.telephony.sip.SipPhone: java.lang.String getImei()> -> _SOURCE_
<com.android.internal.telephony.UiccSmsController: void sendTextForSubscriberWithSelfPermissions(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent,boolean)> -> _SOURCE_
<com.google.android.mms.pdu.NotificationInd: byte[] getTransactionId()> -> _SOURCE_
<com.android.server.content.ContentService: java.util.List getCurrentSyncsAsUser(int)> -> _SOURCE_
<android.database.CursorWrapper: android.database.Cursor getWrappedCursor()> -> _SOURCE_
<com.android.internal.location.ILocationProvider$Stub: android.os.IBinder asBinder()> -> _SOURCE_
<com.android.phone.PhoneInterfaceManager: java.lang.String getLine1NumberForDisplay(int)> -> _SOURCE_
<android.hardware.camera2.CameraManager: void openCamera(java.lang.String,CameraDevice.StateCallback,android.os.Handler)> -> _SOURCE_
<android.location.LocationManager: boolean registerGnssMeasurementsCallback(GnssMeasurementsEvent.Callback)> -> _SOURCE_
<android.location.ICountryListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<com.google.android.mms.pdu.RetrieveConf: com.google.android.mms.pdu.EncodedStringValue getFrom()> -> _SOURCE_
<com.google.android.mms.pdu.NotifyRespInd: int getStatus()> -> _SOURCE_
<android.location.Location: android.location.Location getExtraLocation(java.lang.String)> -> _SOURCE_
<android.database.CursorWrapper: byte[] getBlob(int)> -> _SOURCE_
<com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy: java.util.List getAdnRecordsInEf(int)> -> _SOURCE_
<com.android.server.sip.SipService: boolean isRegistered(java.lang.String,java.lang.String)> -> _SOURCE_
<android.location.LocationManager: boolean registerGnssMeasurementsCallback(GnssMeasurementsEvent.Callback,android.os.Handler)> -> _SOURCE_
<android.location.Address: java.lang.String getSubLocality()> -> _SOURCE_
<android.provider.MediaStore$Images$Thumbnails: android.net.Uri getContentUri(java.lang.String)> -> _SOURCE_
<android.telecom.TelecomManager: java.lang.String getLine1Number(PhoneAccountHandle)> -> _SOURCE_
<android.location.Geofence: double getLatitude()> -> _SOURCE_
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: boolean enableCellBroadcastRange(int,int)> -> _SOURCE_
<com.google.android.mms.pdu.PduBody: com.google.android.mms.pdu.PduPart getPartByName(java.lang.String)> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteSession getThreadSession()> -> _SOURCE_
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.app.PendingIntent)> -> _SOURCE_
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: boolean updateMessageOnIccEf(java.lang.String,int,int,[byte)> -> _SOURCE_
<android.telephony.SmsManager: int checkSmsShortCodeDestination(java.lang.String,java.lang.String)> -> _SOURCE_
<android.net.sip.SipManager: android.net.sip.SipSession createSipSession(android.net.sip.SipProfile,android.net.sip.SipSession$Listener)> -> _SOURCE_
<android.database.CursorWindow: long getLong(int,int)> -> _SOURCE_
<android.location.LocationManager: boolean addNmeaListener(GnssNmeaListener)> -> _SOURCE_
<com.google.android.mms.pdu.ReadOrigInd: int getReadStatus()> -> _SOURCE_
<android.database.BulkCursorToCursorAdaptor: android.os.Bundle getExtras()> -> _SOURCE_
<com.android.calendar.agenda.AgendaByDayAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> -> _SOURCE_
<android.location.ILocationManager$Stub: android.os.IBinder asBinder()> -> _SOURCE_
<com.android.internal.location.ILocationProvider$Stub$Proxy: int getStatus(android.os.Bundle)> -> _SOURCE_
<android.telephony.SubscriptionManager: SubscriptionInfo getActiveSubscriptionInfo(int)> -> _SOURCE_
<android.accounts.AccountManager: AccountManagerFuture<Boolean> -> _SOURCE_
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getDeviceId()> -> _SOURCE_
<com.android.server.location.GeocoderProxy: java.lang.String getConnectedPackageName()> -> _SOURCE_
<android.provider.ContactsContract$ProfileSyncState: byte[] get(android.content.ContentProviderClient,android.accounts.Account)> -> _SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Stub: com.android.internal.telephony.IPhoneSubInfo asInterface(android.os.IBinder)> -> _SOURCE_
<com.android.internal.telephony.SubscriptionController: int setDisplayNumberFormat(int,long)> -> _SOURCE_
<com.android.internal.telephony.UiccSmsController: boolean disableCellBroadcastRangeForSubscriber(long,int,int)> -> _SOURCE_
<com.android.internal.telephony.UiccSmsController: boolean disableCellBroadcastRange(int,int,int)> -> _SOURCE_
<com.android.internal.telephony.IIccPhoneBook$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<com.android.server.location.LocationProviderProxy: com.android.internal.location.ProviderProperties getProperties()> -> _SOURCE_
<android.location.ILocationListener$Stub: android.os.IBinder asBinder()> -> _SOURCE_
<android.location.ILocationManager$Stub$Proxy: java.lang.String getFromLocationName(java.lang.String,double,double,double,double,int,android.location.GeocoderParams,java.util.List)> -> _SOURCE_
<android.renderscript.Allocation: android.renderscript.Allocation createCubemapFromBitmap(android.renderscript.RenderScript,android.graphics.Bitmap)> -> _SOURCE_
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getSubscriberId()> -> _SOURCE_
<android.provider.CalendarContract$EventDays: android.database.Cursor query(android.content.ContentResolver,int,int,java.lang.String[])> -> _SOURCE_
<com.android.internal.telephony.SubscriptionController: android.telephony.SubscriptionInfo getActiveSubscriptionInfo(int)> -> _SOURCE_
<com.android.server.TelephonyRegistry: void listen(java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)> -> _SOURCE_
<android.location.LocationManager: void requestSingleUpdate(java.lang.String,LocationListener,android.os.Looper)> -> _SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getLine1AlphaTag()> -> _SOURCE_
<android.database.sqlite.SQLiteProgram: java.lang.String getSql()> -> _SOURCE_
<android.telephony.TelephonyManager: int getDataNetworkType(int)> -> _SOURCE_
<com.google.android.apps.lightcycle.util.LocationProvider: android.location.Location getCurrentLocation()> -> _SOURCE_
<android.telephony.SmsManager: void sendMultimediaMessage(android.content.Context,android.net.Uri,java.lang.String,android.os.Bundle,android.app.PendingIntent)> -> _SOURCE_
<com.google.android.mms.pdu.SendReq: byte[] getContentType()> -> _SOURCE_
<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: java.util.List getAdnRecordsInEf(int)> -> _SOURCE_
<gov.nist.javax.sip.header.Challenge: java.lang.String getURI()> -> _SOURCE_
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)> -> _SOURCE_
<com.android.server.LocationManagerService: com.android.internal.location.ProviderProperties getProviderProperties(java.lang.String)> -> _SOURCE_
<android.database.DatabaseUtils: java.lang.String getHexCollationKey(java.lang.String)> -> _SOURCE_
<android.location.IGeocodeProvider$Stub$Proxy: java.lang.String getFromLocation(double,double,int,android.location.GeocoderParams,java.util.List)> -> _SOURCE_
<android.renderscript.Allocation: android.renderscript.Allocation createSized(android.renderscript.RenderScript,android.renderscript.Element,int,int)> -> _SOURCE_
<android.location.LocationManager: void removeProximityAlert(android.app.PendingIntent)> -> _SOURCE_
<android.location.LocationManager: void requestLocationUpdates(long,float,android.location.Criteria,android.app.PendingIntent)> -> _SOURCE_
<android.accounts.AccountManager$AmsTask: android.os.Bundle getResult(long,java.util.concurrent.TimeUnit)> -> _SOURCE_
<com.google.android.mms.pdu.PduBody: com.google.android.mms.pdu.PduPart getPart(int)> -> _SOURCE_
<android.location.Location: double getAltitude()> -> _SOURCE_
<android.content.ClipData$Item: android.net.Uri getUri()> -> _SOURCE_
<gov.nist.javax.sip.header.ParametersHeader: gov.nist.javax.sip.address.GenericURI getParameterAsURI(java.lang.String)> -> _SOURCE_
<android.provider.Telephony$Mms: android.database.Cursor query(android.content.ContentResolver,java.lang.String[])> -> _SOURCE_
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getDeviceId()> -> _SOURCE_
<com.android.internal.telephony.SubscriptionController: int setColor(int,long)> -> _SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getLine1AlphaTag()> -> _SOURCE_
<android.telephony.TelephonyManager: NetworkScan requestNetworkScan(NetworkScanRequest,java.util.concurrent.Executor,TelephonyScanManager.NetworkScanCallback)> -> _SOURCE_
<android.net.sip.SipManager: android.net.sip.SipAudioCall takeAudioCall(android.content.Intent,android.net.sip.SipAudioCall$Listener)> -> _SOURCE_
<android.provider.CalendarContract$Instances: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],long,long)> -> _SOURCE_
<com.android.internal.telephony.sip.SipPhone$SipConnection: java.lang.String getCnapName()> -> _SOURCE_
<android.database.CursorWrapper: java.lang.String getColumnName(int)> -> _SOURCE_
<com.android.server.telecom.TelecomService$TelecomServiceImpl: int getCurrentTtyMode()> -> _SOURCE_
<com.google.android.picasasync.PicasaFacade: android.net.Uri getPostAlbumsUri()> -> _SOURCE_
<android.telecom.TelecomManager: void acceptRingingCall()> -> _SOURCE_
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getIsimDomain()> -> _SOURCE_
<android.location.Address: java.lang.String getPhone()> -> _SOURCE_
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: java.util.List getAllMessagesFromIccEf(java.lang.String)> -> _SOURCE_
<com.android.server.LocationManagerService: boolean registerGnssStatusCallback(android.location.IGnssStatusListener,java.lang.String)> -> _SOURCE_
<android.provider.MediaStore$Files: android.net.Uri getContentUri(java.lang.String,long)> -> _SOURCE_
<android.database.MatrixCursor: int getInt(int)> -> _SOURCE_
<android.database.MatrixCursor: java.lang.String[] getColumnNames()> -> _SOURCE_
<android.telephony.gsm.GsmCellLocation: int getCid()> -> _SOURCE_
<com.android.internal.telephony.PhoneProxy: java.lang.String getEsn()> -> _SOURCE_
<com.android.server.LockSettingsService: long getLong(java.lang.String,long,int)> -> _SOURCE_
<com.google.android.mms.pdu.GenericPdu: com.google.android.mms.pdu.PduHeaders getPduHeaders()> -> _SOURCE_
<com.android.server.LocationManagerService: android.location.Location getLastLocation(android.location.LocationRequest,java.lang.String)> -> _SOURCE_
<com.android.phone.PhoneInterfaceManager: int getCalculatedPreferredNetworkType()> -> _SOURCE_
<android.database.AbstractCursor: int getType(int)> -> _SOURCE_
<com.google.android.mms.pdu.RetrieveConf: byte[] getMessageClass()> -> _SOURCE_
<com.android.phone.PhoneInterfaceManager: boolean getSimplifiedNetworkSettingsEnabledForSubscriber(long)> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: java.lang.String getPath()> -> _SOURCE_
<com.android.internal.telephony.PhoneProxy: java.lang.String getDeviceSvn()> -> _SOURCE_
<com.android.server.location.ComprehensiveCountryDetector: android.location.Country getSimBasedCountry()> -> _SOURCE_
<com.android.internal.telephony.SubscriptionController: int setDisplayNameUsingSrc(java.lang.String,int,long)> -> _SOURCE_
<android.telephony.SmsManager: void sendDataMessage(java.lang.String,java.lang.String,short,[byte,android.app.PendingIntent,android.app.PendingIntent)> -> _SOURCE_
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: java.util.List getAllMessagesFromIccEf()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getVoiceMailAlphaTag()> -> _SOURCE_
<com.android.providers.contacts.VoicemailContentProvider: int delete(android.net.Uri,java.lang.String,[java.lang.String)> -> _SOURCE_
<com.android.internal.telephony.PhoneProxy: java.lang.String getCdmaPrlVersion()> -> _SOURCE_
<com.android.server.MmsServiceBroker$BinderService: void sendMessage(int,java.lang.String,android.net.Uri,java.lang.String,android.os.Bundle,android.app.PendingIntent)> -> _SOURCE_
<android.database.CursorWrapper: java.lang.String[] getColumnNames()> -> _SOURCE_
<com.android.server.LocationManagerService: void requestLocationUpdates(java.lang.String,android.location.Criteria,long,float,boolean,android.location.ILocationListener)> -> _SOURCE_
<com.android.internal.telephony.IccSmsInterfaceManager: void sendMultipartText(java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List)> -> _SOURCE_
<android.accounts.IAccountManager$Stub$Proxy: java.lang.String getUserData(android.accounts.Account,java.lang.String)> -> _SOURCE_
<android.database.MergeCursor: short getShort(int)> -> _SOURCE_
<com.android.providers.contacts.CallLogProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SOURCE_
<android.database.CursorWindow: java.lang.String getString(int,int)> -> _SOURCE_
<com.google.android.mms.pdu.MultimediaMessagePdu: int getPriority()> -> _SOURCE_
<android.telephony.SmsCbLocation: java.lang.String toString()> -> _SOURCE_
<android.database.AbstractCursor: int getColumnIndexOrThrow(java.lang.String)> -> _SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getDeviceSvn()> -> _SOURCE_
<android.provider.MediaStore: android.net.Uri getMediaScannerUri()> -> _SOURCE_
<android.database.CursorWrapper: int getCount()> -> _SOURCE_
<android.telephony.TelephonyManager: ServiceState getServiceState()> -> _SOURCE_
<com.google.android.mms.pdu.GenericPdu: com.google.android.mms.pdu.EncodedStringValue getFrom()> -> _SOURCE_
<com.google.android.mms.pdu.NotificationInd: com.google.android.mms.pdu.EncodedStringValue getSubject()> -> _SOURCE_
<com.android.server.telecom.TelecomService$TelecomServiceImpl: boolean hasVoiceMailNumber(android.telecom.PhoneAccountHandle)> -> _SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getLine1AlphaTag()> -> _SOURCE_
<com.google.android.mms.pdu.PduComposer$PositionMarker: int getLength()> -> _SOURCE_
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)> -> _SOURCE_
<android.accounts.AccountManagerService: java.lang.String getPassword(android.accounts.Account)> -> _SOURCE_
<android.database.MatrixCursor: byte[] getBlob(int)> -> _SOURCE_
<android.location.LocationManager: java.util.List getProviders(android.location.Criteria,boolean)> -> _SOURCE_
<com.android.ex.chips.Queries$Query: android.net.Uri getContentUri()> -> _SOURCE_
<android.database.ContentObserver: android.database.IContentObserver releaseContentObserver()> -> _SOURCE_
<com.android.server.sip.SipService: void open3(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.ISipSessionListener)> -> _SOURCE_
<com.android.server.sip.SipService: boolean isOpened(java.lang.String)> -> _SOURCE_
<android.telephony.PhoneNumberUtils: java.lang.String getUsernameFromUriNumber(java.lang.String)> -> _SOURCE_
<android.database.BulkCursorToCursorAdaptor: int getCount()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getGroupIdLevel1()> -> _SOURCE_
<android.location.LocationManager: void requestLocationUpdates(long,float,Criteria,android.app.PendingIntent)> -> _SOURCE_
<android.location.Address: java.lang.String getPremises()> -> _SOURCE_
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getIsimImpi()> -> _SOURCE_
<org.apache.http.client.methods.HttpRequestBase: java.net.URI getURI()> -> _SOURCE_
<com.android.emailcommon.provider.EmailContent: android.net.Uri getUri()> -> _SOURCE_
<com.android.internal.telephony.cdma.CDMALTEPhone: java.lang.String getMsisdn()> -> _SOURCE_
<android.accounts.IAccountManager$Stub$Proxy: android.accounts.Account[] getAccounts(java.lang.String)> -> _SOURCE_
<android.accounts.AccountManager: android.accounts.AccountManagerFuture confirmCredentialsAsUser(android.accounts.Account,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler,android.os.UserHandle)> -> _SOURCE_
<org.ccil.cowan.tagsoup.AttributesImpl: java.lang.String getURI(int)> -> _SOURCE_
<com.android.server.accounts.AccountManagerService: android.accounts.Account[] getAccountsForPackage(java.lang.String,int)> -> _SOURCE_
<android.os.UserManager: int getUserSwitchability(UserHandle)> -> _SOURCE_
<com.android.internal.telephony.PhoneProxy: java.lang.String getLine1Number()> -> _SOURCE_
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void startScan(int,boolean,android.bluetooth.le.ScanSettings,java.util.List,android.os.WorkSource,java.util.List,java.lang.String)> -> _SOURCE_
<android.media.RingtoneManager: android.net.Uri getActualDefaultRingtoneUri(android.content.Context,int)> -> _SOURCE_
<com.android.server.LocationManagerService: boolean addGpsStatusListener(android.location.IGpsStatusListener,java.lang.String)> -> _SOURCE_
<com.android.internal.telephony.UiccSmsController: boolean enableCellBroadcastRange(int,int,int)> -> _SOURCE_
<android.database.CursorWrapper: float getFloat(int)> -> _SOURCE_
<com.android.camera.RecordLocationPreference: java.lang.String getValue()> -> _SOURCE_
<com.android.providers.downloads.DownloadInfo: android.net.Uri getAllDownloadsUri()> -> _SOURCE_
<android.media.RingtoneManager: android.net.Uri getRingtoneUri(int)> -> _SOURCE_
<android.telecom.TelecomManager: List<PhoneAccountHandle> -> _SOURCE_
<com.android.internal.telephony.SubscriptionController: int setDisplayNameUsingSrc(java.lang.String,long,long)> -> _SOURCE_
<com.android.internal.telephony.UiccSmsController: boolean disableCellBroadcastRange(int,int)> -> _SOURCE_
<android.provider.MediaStore$Audio$Playlists: android.net.Uri getContentUri(java.lang.String)> -> _SOURCE_
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: boolean updateMessageOnIccEf(int,int,[byte)> -> _SOURCE_
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getLine1Number()> -> _SOURCE_
<com.android.server.pm.PackageManagerService$InstallParams: android.net.Uri getPackageUri()> -> _SOURCE_
<com.android.server.LocationManagerService: boolean addGpsStatusListener(android.location.IGpsStatusListener)> -> _SOURCE_
<com.android.internal.telephony.sip.SipPhone: android.telephony.CellLocation getCellLocation()> -> _SOURCE_
<com.android.server.sip.SipService: boolean isOpened(java.lang.String,java.lang.String)> -> _SOURCE_
<com.google.android.mms.util.PduCacheEntry: long getThreadId()> -> _SOURCE_
<com.android.internal.telephony.PhoneProxy: java.lang.String getSubscriberId()> -> _SOURCE_
<android.content.ContentProviderOperation: android.net.Uri getUri()> -> _SOURCE_
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: boolean enableCellBroadcast(int)> -> _SOURCE_
<android.telephony.PhoneNumberUtils: boolean isVoiceMailNumber(java.lang.String)> -> _SOURCE_
<android.telecom.TelecomManager: void acceptRingingCall(int)> -> _SOURCE_
<com.android.server.LocationManagerService: java.util.List getProviders(android.location.Criteria,boolean)> -> _SOURCE_
<android.location.LocationManager: boolean registerGnssStatusCallback(java.util.concurrent.Executor,GnssStatus.Callback)> -> _SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getSubscriberId()> -> _SOURCE_
<android.database.sqlite.SQLiteProgram: java.lang.String[] getColumnNames()> -> _SOURCE_
<android.database.CursorToBulkCursorAdaptor: android.os.Bundle getExtras()> -> _SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Stub: android.os.IBinder asBinder()> -> _SOURCE_
<com.android.phone.PhoneInterfaceManager: boolean endCallForSubscriber(long)> -> _SOURCE_
<com.android.server.LocationManagerService: void addProximityAlert(double,double,float,long,android.app.PendingIntent)> -> _SOURCE_
<gov.nist.javax.sip.header.ProxyAuthenticate: javax.sip.address.URI getURI()> -> _SOURCE_
<android.accounts.AccountManager: android.accounts.AccountManagerFuture confirmCredentials(android.accounts.Account,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> -> _SOURCE_
<android.provider.MediaStore$Audio$Playlists$Members: android.net.Uri getContentUri(java.lang.String,long)> -> _SOURCE_
<com.google.android.mms.pdu.AcknowledgeInd: int getReportAllowed()> -> _SOURCE_
<com.android.internal.telephony.SubscriptionController: java.util.List getActiveSubInfoList()> -> _SOURCE_
<com.google.android.mms.pdu.PduPart: byte[] getFilename()> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<com.android.contacts.editor.ContactEditorFragment$PhotoHandler: long getWritableEntityId()> -> _SOURCE_
<android.net.sip.SipManager: void close(java.lang.String)> -> _SOURCE_
<com.google.android.mms.pdu.SendReq: com.google.android.mms.pdu.EncodedStringValue[] getBcc()> -> _SOURCE_
<android.database.sqlite.SQLiteConnection: int getConnectionId()> -> _SOURCE_
<android.provider.MediaStore$Audio$Artists$Albums: android.net.Uri getContentUri(java.lang.String,long)> -> _SOURCE_
<android.provider.CalendarContract$CalendarAlerts: long findNextAlarmTime(android.content.ContentResolver,long)> -> _SOURCE_
<android.accounts.AccountManagerService: android.accounts.AccountManagerService getSingleton()> -> _SOURCE_
<com.android.internal.telephony.IccSmsInterfaceManager: boolean copyMessageToIccEf(java.lang.String,int,[byte,[byte)> -> _SOURCE_
<android.location.IGpsStatusProvider$Stub: android.os.IBinder asBinder()> -> _SOURCE_
<android.provider.MediaStore$Audio$Albums: android.net.Uri getContentUri(java.lang.String)> -> _SOURCE_
<android.database.sqlite.SQLiteProgram: java.lang.Object[] getBindArgs()> -> _SOURCE_
<android.database.AbstractWindowedCursor: android.database.CursorWindow getWindow()> -> _SOURCE_
<android.text.Layout: android.text.TextDirectionHeuristic getTextDirectionHeuristic()> -> _SOURCE_
<com.android.internal.telephony.UiccSmsController: boolean disableCellBroadcastForSubscriber(int,int,int)> -> _SOURCE_
<com.google.android.mms.pdu.EncodedStringValue: byte[] getTextString()> -> _SOURCE_
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getLine1Number()> -> _SOURCE_
<android.telephony.SubscriptionManager: android.telephony.SubscriptionInfo getActiveSubscriptionInfo(int)> -> _SOURCE_
<com.google.android.mms.pdu.ReadRecInd: com.google.android.mms.pdu.EncodedStringValue[] getTo()> -> _SOURCE_
<com.android.server.telecom.TelecomService$TelecomServiceImpl: java.util.List getCallCapablePhoneAccounts()> -> _SOURCE_
<com.android.internal.telephony.PhoneProxy: java.lang.String getDeviceId()> -> _SOURCE_
<android.provider.Telephony$Sms: android.database.Cursor query(android.content.ContentResolver,java.lang.String[])> -> _SOURCE_
<android.os.UserManager: int getUserSwitchability()> -> _SOURCE_
<com.android.server.LockSettingsService: boolean getSeparateProfileChallengeEnabled(int)> -> _SOURCE_
<android.location.IGpsStatusListener$Stub: android.os.IBinder asBinder()> -> _SOURCE_
<android.accounts.AccountManagerService$Session: java.lang.String toDebugString()> -> _SOURCE_
<android.location.Criteria: int getAccuracy()> -> _SOURCE_
<com.android.internal.location.ILocationProvider$Stub$Proxy: com.android.internal.location.ProviderProperties getProperties()> -> _SOURCE_
<android.database.DatabaseUtils: java.lang.String getCollationKey(java.lang.String)> -> _SOURCE_
<android.database.AbstractCursor: java.lang.Object getUpdatedField(int)> -> _SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getMsisdn()> -> _SOURCE_
<com.android.server.sip.SipService: android.net.sip.ISipSession createSession(android.net.sip.SipProfile,android.net.sip.ISipSessionListener)> -> _SOURCE_
<android.renderscript.Allocation: android.renderscript.Allocation createFromBitmapResource(android.renderscript.RenderScript,android.content.res.Resources,int,android.renderscript.Allocation$MipmapControl,int)> -> _SOURCE_
<com.android.server.TelephonyRegistry: void listenForSubscriber(int,java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)> -> _SOURCE_
<com.android.server.LocationManagerService: android.os.Bundle getProviderInfo(java.lang.String)> -> _SOURCE_
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> -> _SOURCE_
<com.google.android.picasastore.PicasaStoreFacade: android.net.Uri getPhotoUri(long,java.lang.String,java.lang.String)> -> _SOURCE_
<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)> -> _SOURCE_
<android.location.LocationManager: void requestLocationUpdates(LocationRequest,LocationListener,android.os.Looper)> -> _SOURCE_
<android.renderscript.AllocationAdapter: int getID(android.renderscript.RenderScript)> -> _SOURCE_
<com.android.internal.telephony.sip.SipPhone: java.lang.String getSubscriberId()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean isVisualVoicemailEnabled(android.telecom.PhoneAccountHandle)> -> _SOURCE_
<android.telephony.TelephonyManager: List<CellInfo> -> _SOURCE_
<com.android.internal.telephony.sip.SipPhone$SipConnection: java.lang.String getAddress()> -> _SOURCE_
<android.database.MatrixCursor: int getCount()> -> _SOURCE_
<android.database.sqlite.SQLiteConnection: java.lang.String describeCurrentOperationUnsafe()> -> _SOURCE_
<com.android.internal.telephony.UiccPhoneBookController: boolean updateAdnRecordsInEfBySearchForSubscriber(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getMeid()> -> _SOURCE_
<android.telephony.PhoneNumberUtils: java.lang.String getNumberFromIntent(android.content.Intent,android.content.Context)> -> _SOURCE_
<android.telephony.TelephonyManager: boolean doesSwitchMultiSimConfigTriggerReboot()> -> _SOURCE_
<org.xml.sax.helpers.NamespaceSupport: java.lang.String getURI(java.lang.String)> -> _SOURCE_
<com.google.android.mms.pdu.PduHeaders: com.google.android.mms.pdu.EncodedStringValue getEncodedStringValue(int)> -> _SOURCE_
